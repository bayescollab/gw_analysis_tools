#ifndef MCMC_SAMPLER_H
#define MCMC_SAMPLER_H
#include <iostream>
#include <functional>
#include <math.h>
/*! \file 
 * Header file for mcmc_sampler
 */
#include "mcmc_sampler_internals.h"
#include "mcmc_io_util.h"
#include "util.h"




void mcmc_step_threaded(int j);
void mcmc_swap_threaded(int i, int j);

void full_random_swap(sampler *s);
void RJPTMCMC_MH_dynamic_PT_alloc_comprehensive_internal_driver(mcmc_sampler_output *sampler_output,
	double **output,
	int **status,
	int *model_status,
	int nested_model_number,
	int max_dimension, 	
	int min_dimension, 	
	int N_steps,	
	int chain_N,
	int max_chain_N_thermo_ensemble,
	int swp_freq,	
	int t0,
	int nu,
	int max_chunk_size,
	std::string chain_distribution_scheme, 
	std::function<double(double*, int*,int ,mcmc_data_interface *,void *)> log_prior,
	std::function<double(double*,int*,int ,mcmc_data_interface *,void *)> log_likelihood,
	std::function<void(double*,int*,int ,double**,mcmc_data_interface *,void *)>fisher,
	std::function<void(double*,double*,int*,int*,int *,int *,mcmc_data_interface *, void *)> RJ_proposal,
	void **user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	bool update_RJ_width,
	std::string statistics_filename,
	std::string chain_filename,
	std::string likelihood_log_filename,
	std::string checkpoint_file
	);
void RJPTMCMC_MH_dynamic_PT_alloc_comprehensive_internal(mcmc_sampler_output *sampler_output,
	double **output, 
	int **parameter_status, 
	int *model_status,
	int nested_model_number,
	int max_dimension, 	
	int min_dimension, 	
	int N_steps,	
	int chain_N,
	int max_chain_N_thermo_ensemble,
	double *initial_pos, 	
	int *initial_status, 	
	int initial_model_status, 	
	double *seeding_var, 	
	double **ensemble_initial_pos,
	int **ensemble_initial_status,
	int *ensemble_initial_model_status,
	double *chain_temps, 
	int swp_freq,	
	int t0,
	int nu,
	int max_chunk_size,
	std::string chain_distribution_scheme, 
	std::function<double(double*, int*,int ,mcmc_data_interface *,void *)> log_prior,
	std::function<double(double*,int*,int ,mcmc_data_interface *,void *)> log_likelihood,
	std::function<void(double*,int*,int ,double**,mcmc_data_interface *,void *)>fisher,
	std::function<void(double*,double*,int*,int*,int *,int *,mcmc_data_interface *, void *)> RJ_proposal,
	void **user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	bool update_RJ_width, 
	std::string statistics_filename,
	std::string chain_filename,
	std::string likelihood_log_filename,
	std::string checkpoint_file
	);

void RJPTMCMC_MH_dynamic_PT_alloc_comprehensive(mcmc_sampler_output *sampler_output,
	double **output, 
	int **parameter_status, 
	int *model_status,
	int nested_model_number,
	int max_dimension, 	
	int min_dimension, 	
	int N_steps,	
	int chain_N,
	int max_chain_N_thermo_ensemble,
	double *initial_pos, 	
	int *initial_status, 	
	int initial_model_status, 	
	double *seeding_var, 	
	double **ensemble_initial_pos,
	int **ensemble_initial_status,
	int *ensemble_initial_model_status,
	double *chain_temps, 
	int swp_freq,	
	int t0,
	int nu,
	int max_chunk_size,
	std::string chain_distribution_scheme, 
	double (*log_prior)(double *param, int *status,int model_status, mcmc_data_interface *interface, void * parameters),	
	double (*log_likelihood)(double *param, int *status,int model_status, mcmc_data_interface *interface, void * parameters),
	void (*fisher)(double *param, int *status,int model_status, double **fisher, mcmc_data_interface *interface, void * parameters),
	void(*RJ_proposal)(double *current_param, double *proposed_param, int *current_status, int *proposed_status,int *current_model_status, int *proposed_model_status, mcmc_data_interface *interface,  void * parameters),
	void **user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	bool update_RJ_width, 
	std::string statistics_filename,
	std::string chain_filename,
	std::string likelihood_log_filename,
	std::string checkpoint_file
	);

void continue_RJPTMCMC_MH_dynamic_PT_alloc_comprehensive_internal(
	std::string checkpoint_file_start, 
	mcmc_sampler_output *sampler_output,
	double **output, 
	int **parameter_status, 
	int *model_status,
	int nested_model_number,
	int N_steps,	
	int max_chain_N_thermo_ensemble,
	double *chain_temps, 
	int swp_freq,	
	int t0,
	int nu,
	int max_chunk_size,
	std::string chain_distribution_scheme,
	std::function<double(double*, int*,int,mcmc_data_interface *,void *)> log_prior,
	std::function<double(double*,int*,int,mcmc_data_interface *,void *)> log_likelihood,
	std::function<void(double*,int*,int,double**,mcmc_data_interface *,void *)>fisher,
	std::function<void(double*,double*,int*,int*,int*,int*,mcmc_data_interface *, void *)> RJ_proposal,
	void **user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	bool update_RJ_width,
	std::string statistics_filename,
	std::string chain_filename,
	std::string likelihood_log_filename,
	std::string checkpoint_file
	);
void continue_RJPTMCMC_MH_dynamic_PT_alloc_comprehensive(
	std::string checkpoint_file_start,
	mcmc_sampler_output *sampler_output,
	double **output, 
	int **parameter_status, 
	int *model_status,
	int nested_model_number,
	int N_steps,	
	int max_chain_N_thermo_ensemble,
	double *chain_temps, 
	int swp_freq,	
	int t0,
	int nu,
	int max_chunk_size,
	std::string chain_distribution_scheme, 
	double (*log_prior)(double *param, int *status, int model_status,mcmc_data_interface *interface, void * parameters),	
	double (*log_likelihood)(double *param, int *status,int model_status, mcmc_data_interface *interface, void * parameters),
	void (*fisher)(double *param, int *status,int model_status, double **fisher, mcmc_data_interface *interface, void * parameters),
	void(*RJ_proposal)(double *current_param, double *proposed_param, int *current_status, int *proposed_status,int *current_model_status, int *proposed_model_status, mcmc_data_interface *interface,  void * parameters),
	void **user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	bool update_RJ_width, 
	std::string statistics_filename,
	std::string chain_filename,
	std::string likelihood_log_filename,
	std::string checkpoint_file
	);

void dynamic_temperature_full_ensemble_internal(sampler *samplerptr, 
	int N_steps, 
	double nu, 
	int t0,
	int swp_freq, 
	bool show_prog);

void continue_PTMCMC_MH_dynamic_PT_alloc_full_ensemble_internal(std::string checkpoint_file_start,
	double ***output, 
	int N_steps,	
	double *chain_temps, 
	int swp_freq,	
	int t0,
	int nu,
	std::function<double(double*,int* ,int,mcmc_data_interface *,void *)> log_prior,
	std::function<double(double*,int*,int,mcmc_data_interface *,void *)> log_likelihood,
	std::function<void(double*,int*,int,double**,mcmc_data_interface *,void *)>fisher,
	void **user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	std::string statistics_filename,
	std::string chain_filename,
	std::string checkpoint_file,
	bool burn_phase 
	);
void continue_RJPTMCMC_MH_dynamic_PT_alloc_full_ensemble_internal(
	std::string checkpoint_file_start,
	double ***output, 
	int ***status,
	int **model_status,
	int nested_model_number,
	int N_steps,	
	double *chain_temps, 
	int swp_freq,	
	int t0,
	int nu,
	std::function<double(double*, int*,int,mcmc_data_interface *,void *)> log_prior,
	std::function<double(double*,int*,int,mcmc_data_interface *,void*)> log_likelihood,
	std::function<void(double*,int*,int,double**,mcmc_data_interface *,void*)>fisher,
	std::function<void(double*,double*,int*,int*,int*,int*,mcmc_data_interface *,void*)> RJ_proposal,
	void **user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	bool update_RJ_width, 
	std::string statistics_filename,
	std::string chain_filename,
	std::string checkpoint_file,
	bool burn_phase 
	);

void continue_RJPTMCMC_MH(std::string start_checkpoint_file,
	double ***output,
	int ***status,
	int **model_status,
	int nested_model_number,
	int N_steps,
	int swp_freq,
	double (*log_prior)(double *param, int *status,int model_status, mcmc_data_interface *interface, void * parameters),	
	double (*log_likelihood)(double *param, int *status,int model_status, mcmc_data_interface *interface, void * parameters),
	void (*fisher)(double *param, int *status,int model_status, double **fisher, mcmc_data_interface *interface, void * parameters),
	void(*RJ_proposal)(double *current_param, double *proposed_param, int *current_status, int *proposed_status,int *current_model_status, int *proposed_model_status, mcmc_data_interface *interface,  void * parameters),
	void **user_parameters,
	int numThreads,
	bool pool,
	bool show_prog,
	std::string statistics_filename,
	std::string chain_filename,
	std::string auto_corr_filename,
	std::string likelihood_log_filename,
	std::string end_checkpoint_file
	);
void PTMCMC_MH_dynamic_PT_alloc_uncorrelated_internal_driver(mcmc_sampler_output *sampler_output,
	double **output,
	int dimension, 	
	int N_steps,	
	int chain_N,
	int max_chain_N_thermo_ensemble,
	int swp_freq,	
	int t0,/**< Time constant of the decay of the chain dynamics  (~1000)*/
	int nu,/**< Initial amplitude of the dynamics (~100)*/
	int max_chunk_size,
	std::string chain_distribution_scheme, 
	std::function<double(double*,int* ,int,mcmc_data_interface *,void *)> log_prior,
	std::function<double(double*,int*,int,mcmc_data_interface *,void *)> log_likelihood,
	std::function<void(double*,int*,int,double**,mcmc_data_interface *,void *)>fisher,
	void **user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	std::string statistics_filename,
	std::string chain_filename,
	std::string likelihood_log_filename,
	std::string checkpoint_file,
	bool continue_burn
	);
void continue_RJPTMCMC_MH_internal(
	sampler *samplerptr,
	std::string start_checkpoint_file,
	double ***output,
	int ***status,
	int **model_status,
	int nested_model_number,
	int N_steps,
	int swp_freq,
	std::function<double(double*,int *,int, mcmc_data_interface *, void *)> log_prior,
	std::function<double(double*,int*,int,mcmc_data_interface *,void *)> log_likelihood,
	std::function<void(double*,int*,int,double**,mcmc_data_interface *,void *)>fisher,
	std::function<void(double*,double*, int*,int*,int*,int*,mcmc_data_interface *, void *)> RJ_proposal,
	void ** user_parameters,
	int numThreads,
	bool pool,
	bool show_prog,
	bool update_RJ_width, 
	std::string statistics_filename,
	std::string chain_filename,
	std::string auto_corr_filename,
	std::string likelihood_log_filename,
	std::string end_checkpoint_file,
	bool tune, 
	bool burn_phase
	);
void RJPTMCMC_MH_internal(double ***output, 
	int ***parameter_status, 	
	int **model_status,
	int nested_model_number,
	int max_dimension, 	
	int min_dimension, 	
	int N_steps,	
	int chain_N,	
	double *initial_pos, 	
	int *initial_status, 	
	int initial_model_status, 	
	double *seeding_var, 	
	double **ensemble_initial_position,
	int **ensemble_initial_status,
	int *ensemble_initial_model_status,
	double *chain_temps,	
	int swp_freq,	
	std::function<double(double*,int *,int, mcmc_data_interface *, void *)> log_prior,
	std::function<double(double*,int*,int,mcmc_data_interface *,void *)> log_likelihood,
	std::function<void(double*,int*,int,double**,mcmc_data_interface *, void *)>fisher,
	std::function<void(double*,double*, int*,int*,int*,int*,mcmc_data_interface *,void *)> RJ_proposal,
	void ** user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	bool update_RJ_width, 
	std::string statistics_filename,
	std::string chain_filename,
	std::string auto_corr_filename,
	std::string likelihood_log_filename,
	std::string checkpoint_file
	);
void RJPTMCMC_MH(double ***output, 
	int ***parameter_status, 
	int **model_status,
	int nested_model_number,
	int max_dimension, 
	int min_dimension, 	
	int N_steps,	
	int chain_N,	
	double *initial_pos, 	
	int *initial_status, 	
	int initial_model_status, 	
	double *seeding_var, 	
	double **ensemble_initial_position,
	int **ensemble_initial_status,
	int *ensemble_initial_model_status,
	double *chain_temps,	
	int swp_freq,	
	double (*log_prior)(double *param, int *status,int model_status, mcmc_data_interface *, void * parameters),	
	double (*log_likelihood)(double *param, int *status, int model_status,mcmc_data_interface *, void * parameters),
	void (*fisher)(double *param, int *status,int model_status, double **fisher, mcmc_data_interface *, void *parameters),
	void(*RJ_proposal)(double *current_param, double *proposed_param, int *current_status, int *proposed_status,int *current_model_status, int *proposed_model_status, mcmc_data_interface *, void *parameters),
	void ** user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	std::string statistics_filename,
	std::string chain_filename,
	std::string auto_corr_filename,
	std::string likelihood_log_filename,
	std::string checkpoint_file
	);

void continue_PTMCMC_MH_dynamic_PT_alloc_uncorrelated(std::string checkpoint_file_start,
	mcmc_sampler_output *sampler_output,
	double **output, 
	int N_steps,	
	int max_chain_N_thermo_ensemble,	
	double *chain_temps,
	int swp_freq,	
	int t0,
	int nu,
	int max_chunk_size,
	std::string chain_distribution_scheme, 
	double (*log_prior)(double *param, mcmc_data_interface *interface, void * parameters),	
	double (*log_likelihood)(double *param, mcmc_data_interface *interface, void *parameters),
	void (*fisher)(double *param,  double **fisher, mcmc_data_interface *interface, void *parameters),
	void ** user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	std::string statistics_filename,
	std::string chain_filename,
	std::string likelihood_log_filename,
	std::string checkpoint_file
	);
void continue_PTMCMC_MH_dynamic_PT_alloc_uncorrelated_internal(std::string checkpoint_file_start,
	mcmc_sampler_output *sampler_output,
	double **output, 
	int N_steps,	
	int max_chain_N_thermo_ensemble,	
	double *chain_temps,
	int swp_freq,	
	int t0,
	int nu,
	int max_chunk_size,
	std::string chain_distribution_scheme, 
	std::function<double(double*,int *,int,mcmc_data_interface *, void *)> log_prior,
	std::function<double(double*,int *,int,mcmc_data_interface *, void*)> log_likelihood,
	std::function<void(double*,int*,int,double**,mcmc_data_interface*, void*)>fisher,
	void **user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	std::string statistics_filename,
	std::string chain_filename,
	std::string likelihood_log_filename,
	std::string checkpoint_file
	);
void PTMCMC_MH_dynamic_PT_alloc_uncorrelated(mcmc_sampler_output *sampler_output,
	double **output, 
	int dimension, 	
	int N_steps,	
	int chain_N,	
	int max_chain_N_thermo_ensemble,	
	double *initial_pos, 	
	double *seeding_var, 	
	double **ensemble_initial_position,
	double *chain_temps,
	int swp_freq,	
	int t0,
	int nu,
	int max_chunk_size,
	std::string chain_distribution_scheme, 
	double (*log_prior)(double *param, mcmc_data_interface *interface, void * parameters),	
	double (*log_likelihood)(double *param, mcmc_data_interface *interface, void *parameters),
	void (*fisher)(double *param,  double **fisher, mcmc_data_interface *interface, void *parameters),
	void ** user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	std::string statistics_filename,
	std::string chain_filename,
	std::string likelihood_log_filename,
	std::string checkpoint_file
	);
void PTMCMC_MH_dynamic_PT_alloc_uncorrelated_internal(mcmc_sampler_output *sampler_output,
	double **output, 
	int dimension, 	
	int N_steps,	
	int chain_N,	
	int max_chain_N_thermo_ensemble,	
	double *initial_pos, 	
	double *seeding_var, 	
	double **ensemble_initial_position,
	double *chain_temps,
	int swp_freq,	
	int t0,
	int nu,
	int max_chunk_size,
	std::string chain_distribution_scheme, 
	std::function<double(double*,int *,int,mcmc_data_interface *interface, void *)> log_prior,
	std::function<double(double*,int *,int,mcmc_data_interface *interface, void*)> log_likelihood,
	std::function<void(double*,int*,int,double**,mcmc_data_interface *interface, void*)>fisher,
	void **user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	std::string statistics_filename,
	std::string chain_filename,
	std::string likelihood_log_filename,
	std::string checkpoint_file
	);
void dynamic_temperature_internal(sampler *samplerptr, 
	int N_steps, 
	double nu, 
	int t0,
	int swp_freq, 
	int max_chain_N_thermo_ensemble, 
	bool dynamic_chain_number,
	bool show_prog);
void continue_PTMCMC_MH_dynamic_PT_alloc_internal(std::string checkpoint_file_start,
	double ***output, 
	int N_steps,	
	int max_chain_N_thermo_ensemble,	
	double *chain_temps,
	int swp_freq,	
	int t0,
	int nu,
	std::string chain_distribution_scheme, 
	std::function<double(double*,int *,int,mcmc_data_interface *interface ,void *)> log_prior,
	std::function<double(double*,int *,int,mcmc_data_interface *interface , void *)> log_likelihood,
	std::function<void(double*,int*,int,double**,mcmc_data_interface *interface, void *)>fisher,
	void ** user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	bool dynamic_chain_number,
	std::string statistics_filename,
	std::string chain_filename,
	std::string checkpoint_file,
	bool burn_phase
	);
void continue_PTMCMC_MH_dynamic_PT_alloc(std::string checkpoint_file_start,
	double ***output, 
	int N_steps,	
	int max_chain_N_thermo_ensemble,	
	double *chain_temps,
	int swp_freq,	
	int t0,
	int nu,
	std::string chain_distribution_scheme, 
	double (*log_prior)(double *param, mcmc_data_interface *interface, void *parameters),	
	double (*log_likelihood)(double *param,  mcmc_data_interface *interface, void *parameters),
	void (*fisher)(double *param,  double **fisher, mcmc_data_interface *interface , void *parameters),
	void ** user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	std::string statistics_filename,
	std::string chain_filename,
	std::string checkpoint_file
	);
void PTMCMC_MH_dynamic_PT_alloc_internal(double ***output, 
	int dimension, 	
	int N_steps,	
	int chain_N,	
	int max_chain_N_thermo_ensemble,	
	double *initial_pos, 	
	double *seeding_var, 	
	double **ensemble_initial_position,
	double *chain_temps,
	int swp_freq,	
	int t0,
	int nu,
	std::string chain_distribution_scheme, 
	std::function<double(double*,int *,int,mcmc_data_interface *interface, void *)> log_prior,
	std::function<double(double*,int *,int,mcmc_data_interface *interface, void *)> log_likelihood,
	std::function<void(double*,int*,int,double**,mcmc_data_interface *interface, void *)>fisher,
	void **user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	bool dynamic_chain_number,
	std::string statistics_filename,
	std::string chain_filename,
	std::string checkpoint_file,
	bool burn_phase 
	);
void PTMCMC_MH_dynamic_PT_alloc(double ***output, 
	int dimension, 	
	int N_steps,	
	int chain_N,	
	int max_chain_N_thermo_ensemble,	
	double *initial_pos, 	
	double *seeding_var, 	
	double **ensemble_initial_position,
	double *chain_temps,
	int swp_freq,	
	int t0,
	int nu,
	std::string chain_distribution_scheme, 
	double (*log_prior)(double *param, mcmc_data_interface *interface , void *parameters),	
	double (*log_likelihood)(double *param, mcmc_data_interface *interface, void *parameters),
	void (*fisher)(double *param,  double **fisher, mcmc_data_interface *interface, void * parameters),
	void **user_parameters,
	int numThreads, 
	bool pool, 
	bool show_prog, 
	std::string statistics_filename,
	std::string chain_filename,
	std::string checkpoint_file
	);
void continue_PTMCMC_MH(std::string start_checkpoint_file,
	double ***output,
	int N_steps,
	int swp_freq,
	double (*log_prior)(double *param, mcmc_data_interface *interface, void *parameters),
	double (*log_likelihood)(double *param, mcmc_data_interface *interface , void *parameters),
	void (*fisher)(double *param,  double **fisher, mcmc_data_interface *interface, void *parameters),
	void **user_parameters,
	int numThreads,
	bool pool,
	bool show_prog,
	std::string statistics_filename,
	std::string chain_filename,
	std::string end_checkpoint_file,
	bool tune
	);
void PTMCMC_MH_loop(sampler *samplerptr);

void PTMCMC_MH_step_incremental(sampler *samplerptr, int increment);

void PTMCMC_MH(	double ***output, 
	int dimension, 	
	int N_steps,	
	int chain_N,	
	double *initial_pos, 	
	double *seeding_var,
	double **ensemble_initial_position,
	double *chain_temps,	
	int swp_freq,	
	double (*log_prior)(double *param, mcmc_data_interface *interface , void *parameters),	
	double (*log_likelihood)(double *param, mcmc_data_interface *interface, void *parameters),	
	void (*fisher)(double *param,  double **fisher, mcmc_data_interface *interface, void *parameters),
	void **user_parameters,
	int numThreads,
	bool pool,
	bool show_prog,
	std::string statistics_filename,
	std::string chain_filename,
	std::string checkpoint_filename
	);
void PTMCMC_MH_internal(	double ***output, 
	int dimension, 	
	int N_steps,	
	int chain_N,	
	double *initial_pos, 	
	double *seeding_var,
	double **ensemble_initial_position,
	double *chain_temps,	
	int swp_freq,	
	std::function<double(double*,int *,int,mcmc_data_interface *, void*)> log_prior,
	std::function<double(double*,int *,int,mcmc_data_interface *,void *)> log_likelihood,
	std::function<void(double*,int *,int,double**,mcmc_data_interface *,void *)>fisher,
	void **user_parameters,
	int numThreads,
	bool pool,
	bool show_prog,
	std::string statistics_filename,
	std::string chain_filename,
	std::string checkpoint_filename,
	bool tune,
	bool burn_phase
	);
void continue_PTMCMC_MH_internal(sampler *samplerptr, 
	std::string start_checkpoint_file,
	double ***output,
	int N_steps,
	int swp_freq,
	std::function<double(double*,int *,int,mcmc_data_interface *,void*)> log_prior,
	std::function<double(double*,int *,int,mcmc_data_interface *,void *)> log_likelihood,
	std::function<void(double*,int *,int,double**,mcmc_data_interface *, void*)>fisher,
	void **user_parameters,
	int numThreads,
	bool pool,
	bool show_prog,
	std::string statistics_filename,
	std::string chain_filename,
	std::string end_checkpoint_file,
	bool tune,
	bool burn_phase
	);

#endif
