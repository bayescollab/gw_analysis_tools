var searchData=
[
  ['c_5fcoeffs_0',['c_coeffs',['../IMRPhenomPv3utils_8cpp.html#aac2c573a74d165dbe36ff5e1aad4c22c',1,'IMRPhenomPv3utils.cpp']]],
  ['c_5fcoeffs_3c_20adouble_20_3e_1',['c_coeffs&lt; adouble &gt;',['../IMRPhenomPv3utils_8cpp.html#a8600b478b801f9548138f84f9d31fb49',1,'IMRPhenomPv3utils.cpp']]],
  ['c_5fcoeffs_3c_20double_20_3e_2',['c_coeffs&lt; double &gt;',['../IMRPhenomPv3utils_8cpp.html#a705c73ef1f52de38a548585084e94d68',1,'IMRPhenomPv3utils.cpp']]],
  ['calc_5fac_5fvals_3',['calc_ac_vals',['../classmcmc__sampler__output.html#a66fa29c6e27ae15b33143b71353f02f5',1,'mcmc_sampler_output']]],
  ['calc_5fac_5fvals_5ffull_5fensemble_4',['calc_ac_vals_full_ensemble',['../classmcmc__sampler__output.html#acdfbfc7f96165cbb7b6b812c437581f9',1,'mcmc_sampler_output']]],
  ['calc_5fgrad_5',['calc_grad',['../mcmc__sampler__internals_8cpp.html#a353a47de1aa469429de3496e2d765e4e',1,'mcmc_sampler_internals.cpp']]],
  ['calculate_5fchirpmass_6',['calculate_chirpmass',['../util_8h.html#af7aeeebcf190ab70c667a478a51ce435',1,'calculate_chirpmass(double mass1, double mass2):&#160;util.cpp'],['../util_8h.html#a0a7a0da86013d639bf8689c9a01d8583',1,'calculate_chirpmass(adouble mass1, adouble mass2):&#160;util.cpp'],['../util_8cpp.html#af7aeeebcf190ab70c667a478a51ce435',1,'calculate_chirpmass(double mass1, double mass2):&#160;util.cpp'],['../util_8cpp.html#a0a7a0da86013d639bf8689c9a01d8583',1,'calculate_chirpmass(adouble mass1, adouble mass2):&#160;util.cpp']]],
  ['calculate_5fchirpmass_5fpy_7',['calculate_chirpmass_py',['../gwatpy__wrapping_8h.html#a6e0b1a879c6b63ed3d99be18ea808834',1,'calculate_chirpmass_py(double mass1, double mass2, double *out):&#160;gwatpy_wrapping.cpp'],['../gwatpy__wrapping_8cpp.html#a6e0b1a879c6b63ed3d99be18ea808834',1,'calculate_chirpmass_py(double mass1, double mass2, double *out):&#160;gwatpy_wrapping.cpp']]],
  ['calculate_5fchirpmass_5fvectorized_5fpy_8',['calculate_chirpmass_vectorized_py',['../gwatpy__wrapping_8h.html#a7a70dc236f9925dede4b3de9d5f9357b',1,'calculate_chirpmass_vectorized_py(double *mass1, double *mass2, double *out, int length):&#160;gwatpy_wrapping.cpp'],['../gwatpy__wrapping_8cpp.html#a7a70dc236f9925dede4b3de9d5f9357b',1,'calculate_chirpmass_vectorized_py(double *mass1, double *mass2, double *out, int length):&#160;gwatpy_wrapping.cpp']]],
  ['calculate_5fderivatives_9',['calculate_derivatives',['../fisher_8h.html#a8d646ad4dd21d74ed91df1080f5c61c7',1,'calculate_derivatives(std::complex&lt; double &gt; **response_deriv, double *frequencies, int length, int dimension, string detector, string reference_detector, string gen_method, gen_params_base&lt; double &gt; *parameters, int order):&#160;fisher.cpp'],['../fisher_8cpp.html#a8d646ad4dd21d74ed91df1080f5c61c7',1,'calculate_derivatives(std::complex&lt; double &gt; **response_deriv, double *frequencies, int length, int dimension, string detector, string reference_detector, string gen_method, gen_params_base&lt; double &gt; *parameters, int order):&#160;fisher.cpp']]],
  ['calculate_5fderivatives_5fautodiff_10',['calculate_derivatives_autodiff',['../fisher_8h.html#aada6ef4bab65e527ed6ba7e40fbcf309',1,'calculate_derivatives_autodiff(double *frequency, int length, int dimension, std::string generation_method, gen_params *parameters, std::complex&lt; double &gt; **waveform_deriv, int *waveform_tapes, std::string detector, bool autodiff_time_deriv, std::string reference_detector):&#160;fisher.cpp'],['../fisher_8cpp.html#aada6ef4bab65e527ed6ba7e40fbcf309',1,'calculate_derivatives_autodiff(double *frequency, int length, int dimension, std::string generation_method, gen_params *parameters, std::complex&lt; double &gt; **waveform_deriv, int *waveform_tapes, std::string detector, bool autodiff_time_deriv, std::string reference_detector):&#160;fisher.cpp']]],
  ['calculate_5fea_5fsensitivity_11',['calculate_EA_sensitivity',['../classEA__IMRPhenomD__NRT.html#a38433bb45993678656a32c32339b2b57',1,'EA_IMRPhenomD_NRT']]],
  ['calculate_5feta_12',['calculate_eta',['../util_8h.html#a06ffbad5fe4daa3872db626f90556202',1,'calculate_eta(double mass1, double mass2):&#160;util.cpp'],['../util_8h.html#adc4391c722f94cb17f0e0275a0930fa9',1,'calculate_eta(adouble mass1, adouble mass2):&#160;util.cpp'],['../util_8cpp.html#a06ffbad5fe4daa3872db626f90556202',1,'calculate_eta(double mass1, double mass2):&#160;util.cpp'],['../util_8cpp.html#adc4391c722f94cb17f0e0275a0930fa9',1,'calculate_eta(adouble mass1, adouble mass2):&#160;util.cpp']]],
  ['calculate_5feta_5fpy_13',['calculate_eta_py',['../gwatpy__wrapping_8h.html#ad80d1f84f6078da54a7565ad6806a1c1',1,'calculate_eta_py(double mass1, double mass2, double *out):&#160;gwatpy_wrapping.cpp'],['../gwatpy__wrapping_8cpp.html#ad80d1f84f6078da54a7565ad6806a1c1',1,'calculate_eta_py(double mass1, double mass2, double *out):&#160;gwatpy_wrapping.cpp']]],
  ['calculate_5feta_5fvectorized_5fpy_14',['calculate_eta_vectorized_py',['../gwatpy__wrapping_8h.html#a54df3e76769455db0921d43b532efdc8',1,'calculate_eta_vectorized_py(double *mass1, double *mass2, double *out, int length):&#160;gwatpy_wrapping.cpp'],['../gwatpy__wrapping_8cpp.html#a54df3e76769455db0921d43b532efdc8',1,'calculate_eta_vectorized_py(double *mass1, double *mass2, double *out, int length):&#160;gwatpy_wrapping.cpp']]],
  ['calculate_5feuler_5fangles_15',['calculate_euler_angles',['../classIMRPhenomPv2.html#aba929d7ceebe4ddbfd13088c1ac0596b',1,'IMRPhenomPv2']]],
  ['calculate_5feuler_5fcoeffs_16',['calculate_euler_coeffs',['../classIMRPhenomPv2.html#afc0f88c773f46ab060482bc530f60115',1,'IMRPhenomPv2']]],
  ['calculate_5fevidence_17',['calculate_evidence',['../classmcmc__sampler__output.html#a1768374fb26d411b7f08a2768cc44b9c',1,'mcmc_sampler_output::calculate_evidence()'],['../mcmc__sampler__internals_8h.html#aacc2fb2acd1f084a88ca59c9050dacab',1,'calculate_evidence(sampler *samplerptr):&#160;mcmc_sampler_internals.cpp'],['../mcmc__sampler__internals_8cpp.html#aacc2fb2acd1f084a88ca59c9050dacab',1,'calculate_evidence(sampler *samplerptr):&#160;mcmc_sampler_internals.cpp']]],
  ['calculate_5ffisher_5felements_18',['calculate_fisher_elements',['../fisher_8h.html#ad1e1f85b3af98f868772ea95d47d33c0',1,'calculate_fisher_elements(double *frequency, int length, int dimension, std::complex&lt; double &gt; **response_deriv, double **output, double *psd, std::string integration_method, double *weights, bool log10_f):&#160;fisher.cpp'],['../fisher_8cpp.html#ad1e1f85b3af98f868772ea95d47d33c0',1,'calculate_fisher_elements(double *frequency, int length, int dimension, std::complex&lt; double &gt; **response_deriv, double **output, double *psd, std::string integration_method, double *weights, bool log10_f):&#160;fisher.cpp']]],
  ['calculate_5ffisher_5felements_5fbatch_19',['calculate_fisher_elements_batch',['../fisher_8h.html#adabed0003b88c9a4ffdc4035862219a4',1,'calculate_fisher_elements_batch(double *frequency, int length, int base_dimension, int full_dimension, std::complex&lt; double &gt; **response_deriv, double **output, double *psd, std::string integration_method, double *weights, bool log10_f):&#160;fisher.cpp'],['../fisher_8cpp.html#adabed0003b88c9a4ffdc4035862219a4',1,'calculate_fisher_elements_batch(double *frequency, int length, int base_dimension, int full_dimension, std::complex&lt; double &gt; **response_deriv, double **output, double *psd, std::string integration_method, double *weights, bool log10_f):&#160;fisher.cpp']]],
  ['calculate_5fintegrand_5fautodiff_5fgsl_5fsubroutine_20',['calculate_integrand_autodiff_gsl_subroutine',['../fisher_8h.html#a0483f09b0c7a53ae7b65d3dff7385697',1,'calculate_integrand_autodiff_gsl_subroutine(double frequency, void *params_in):&#160;fisher.cpp'],['../fisher_8cpp.html#a0483f09b0c7a53ae7b65d3dff7385697',1,'calculate_integrand_autodiff_gsl_subroutine(double frequency, void *params_in):&#160;fisher.cpp']]],
  ['calculate_5fmass1_21',['calculate_mass1',['../util_8h.html#a85a0fc50a6f06dd519a18a6d273a0b4a',1,'calculate_mass1(double chirpmass, double eta):&#160;util.cpp'],['../util_8h.html#a663f11702648d9a84c9b573e9ab76f09',1,'calculate_mass1(adouble chirpmass, adouble eta):&#160;util.cpp'],['../util_8cpp.html#a85a0fc50a6f06dd519a18a6d273a0b4a',1,'calculate_mass1(double chirpmass, double eta):&#160;util.cpp'],['../util_8cpp.html#a663f11702648d9a84c9b573e9ab76f09',1,'calculate_mass1(adouble chirpmass, adouble eta):&#160;util.cpp']]],
  ['calculate_5fmass1_5fmcq_22',['calculate_mass1_Mcq',['../util_8h.html#a888a9fa1b2ade494d8e933782ff80dfe',1,'calculate_mass1_Mcq(double chirpmass, double q):&#160;util.cpp'],['../util_8h.html#aab011148666d4d27e4489a2d57a40419',1,'calculate_mass1_Mcq(adouble chirpmass, adouble q):&#160;util.cpp'],['../util_8cpp.html#a888a9fa1b2ade494d8e933782ff80dfe',1,'calculate_mass1_Mcq(double chirpmass, double q):&#160;util.cpp'],['../util_8cpp.html#aab011148666d4d27e4489a2d57a40419',1,'calculate_mass1_Mcq(adouble chirpmass, adouble q):&#160;util.cpp']]],
  ['calculate_5fmass1_5fpy_23',['calculate_mass1_py',['../gwatpy__wrapping_8h.html#adcc600e9ab553ccebd602a44518f0b41',1,'calculate_mass1_py(double chirpmass, double eta, double *out):&#160;gwatpy_wrapping.cpp'],['../gwatpy__wrapping_8cpp.html#adcc600e9ab553ccebd602a44518f0b41',1,'calculate_mass1_py(double chirpmass, double eta, double *out):&#160;gwatpy_wrapping.cpp']]],
  ['calculate_5fmass1_5fvectorized_5fpy_24',['calculate_mass1_vectorized_py',['../gwatpy__wrapping_8h.html#a7ba7a9205f6d2b733a57bd4b339b2870',1,'calculate_mass1_vectorized_py(double *chirpmass, double *eta, double *out, int length):&#160;gwatpy_wrapping.cpp'],['../gwatpy__wrapping_8cpp.html#a7ba7a9205f6d2b733a57bd4b339b2870',1,'calculate_mass1_vectorized_py(double *chirpmass, double *eta, double *out, int length):&#160;gwatpy_wrapping.cpp']]],
  ['calculate_5fmass2_25',['calculate_mass2',['../util_8h.html#a5f62f4a7c1011180080d72e0032cef1b',1,'calculate_mass2(double chirpmass, double eta):&#160;util.cpp'],['../util_8h.html#adb85ce9fbb2e3a438dd41a35c38a3237',1,'calculate_mass2(adouble chirpmass, adouble eta):&#160;util.cpp'],['../util_8cpp.html#a5f62f4a7c1011180080d72e0032cef1b',1,'calculate_mass2(double chirpmass, double eta):&#160;util.cpp'],['../util_8cpp.html#adb85ce9fbb2e3a438dd41a35c38a3237',1,'calculate_mass2(adouble chirpmass, adouble eta):&#160;util.cpp']]],
  ['calculate_5fmass2_5fmcq_26',['calculate_mass2_Mcq',['../util_8h.html#aab6830a77bff79cda4371fa2f9d3c97e',1,'calculate_mass2_Mcq(double chirpmass, double q):&#160;util.cpp'],['../util_8h.html#ad1b9406351d1a583c36cffc8f3df340a',1,'calculate_mass2_Mcq(adouble chirpmass, adouble q):&#160;util.cpp'],['../util_8cpp.html#aab6830a77bff79cda4371fa2f9d3c97e',1,'calculate_mass2_Mcq(double chirpmass, double q):&#160;util.cpp'],['../util_8cpp.html#ad1b9406351d1a583c36cffc8f3df340a',1,'calculate_mass2_Mcq(adouble chirpmass, adouble q):&#160;util.cpp']]],
  ['calculate_5fmass2_5fpy_27',['calculate_mass2_py',['../gwatpy__wrapping_8h.html#a6ee786481e0f591251892a6fcb412668',1,'calculate_mass2_py(double chirpmass, double eta, double *out):&#160;gwatpy_wrapping.cpp'],['../gwatpy__wrapping_8cpp.html#a6ee786481e0f591251892a6fcb412668',1,'calculate_mass2_py(double chirpmass, double eta, double *out):&#160;gwatpy_wrapping.cpp']]],
  ['calculate_5fmass2_5fvectorized_5fpy_28',['calculate_mass2_vectorized_py',['../gwatpy__wrapping_8h.html#ae1c929b74e03215bdc75864b995118c8',1,'calculate_mass2_vectorized_py(double *chirpmass, double *eta, double *out, int length):&#160;gwatpy_wrapping.cpp'],['../gwatpy__wrapping_8cpp.html#ae1c929b74e03215bdc75864b995118c8',1,'calculate_mass2_vectorized_py(double *chirpmass, double *eta, double *out, int length):&#160;gwatpy_wrapping.cpp']]],
  ['calculate_5fnrt_5famp_5fcoefficient_29',['calculate_NRT_amp_coefficient',['../classIMRPhenomD__NRT.html#a9f8a164805a82e6e242b03466dce1c3f',1,'IMRPhenomD_NRT']]],
  ['calculate_5foct_5fmoment_30',['calculate_oct_moment',['../classIMRPhenomD__NRT.html#aca81d8982e998e9ebf4ed26ce3ec1792',1,'IMRPhenomD_NRT']]],
  ['calculate_5fquad_5fmoment_31',['calculate_quad_moment',['../classIMRPhenomD__NRT.html#a6acac2c810ec2a2918b7cbc1272213ee',1,'IMRPhenomD_NRT']]],
  ['calculate_5fsnr_32',['calculate_snr',['../waveform__util_8h.html#adaf1d5381b3ad4774532bf2e496b2893',1,'calculate_snr(std::string sensitivity_curve, std::complex&lt; double &gt; *waveform, double *frequencies, int length, std::string integration_method=&quot;SIMPSONS&quot;, double *weights=NULL, bool log10_freq=false):&#160;waveform_util.cpp'],['../waveform__util_8h.html#a61ef9a5f55e645fb1d67f38e5ff02b19',1,'calculate_snr(std::string sensitivity_curve, std::string detector, std::string generation_method, gen_params_base&lt; double &gt; *params, double *frequencies, int length, std::string integration_method=&quot;SIMPSONS&quot;, double *weights=NULL, bool log10_freq=false):&#160;waveform_util.cpp'],['../waveform__util_8cpp.html#a05babb5fb4cb68076f9d5d7bdd4721c0',1,'calculate_snr(std::string sensitivity_curve, std::string detector, std::string generation_method, gen_params_base&lt; double &gt; *params, double *frequencies, int length, std::string integration_method, double *weights, bool log10_freq):&#160;waveform_util.cpp'],['../waveform__util_8cpp.html#aa81e29fb23990c77521954d4cf735ce5',1,'calculate_snr(std::string sensitivity_curve, std::complex&lt; double &gt; *waveform, double *frequencies, int length, std::string integration_method, double *weights, bool log10_freq):&#160;waveform_util.cpp']]],
  ['calculate_5fsnr_5fgsl_33',['calculate_snr_gsl',['../waveform__util_8h.html#ae457f376ac6868d88fa7c428a1cc0798',1,'calculate_snr_gsl(double *snr, std::string sensitivity_curve, std::string detector, std::string generation_method, gen_params_base&lt; double &gt; *params, double f_min, double f_max, double relative_error):&#160;waveform_util.cpp'],['../waveform__util_8h.html#a7a6b3d3d9c2f2fee67faef89f435f780',1,'calculate_snr_gsl(double *snr, std::string sensitivity_curve, std::string detector, std::string generation_method, gen_params_base&lt; double &gt; *params, double f_min, double f_max, double relative_error, gsl_integration_workspace *w, int np):&#160;waveform_util.cpp'],['../waveform__util_8cpp.html#ae457f376ac6868d88fa7c428a1cc0798',1,'calculate_snr_gsl(double *snr, std::string sensitivity_curve, std::string detector, std::string generation_method, gen_params_base&lt; double &gt; *params, double f_min, double f_max, double relative_error):&#160;waveform_util.cpp'],['../waveform__util_8cpp.html#a7a6b3d3d9c2f2fee67faef89f435f780',1,'calculate_snr_gsl(double *snr, std::string sensitivity_curve, std::string detector, std::string generation_method, gen_params_base&lt; double &gt; *params, double f_min, double f_max, double relative_error, gsl_integration_workspace *w, int np):&#160;waveform_util.cpp']]],
  ['calculate_5fsnr_5finternal_34',['calculate_snr_internal',['../waveform__util_8h.html#a44e68d546d2ec3ad83b5c10bdf3f1dde',1,'calculate_snr_internal(double *psd, std::complex&lt; double &gt; *waveform, double *frequencies, int length, std::string integration_method=&quot;SIMPSONS&quot;, double *weights=NULL, bool log10_freq=false):&#160;waveform_util.cpp'],['../waveform__util_8cpp.html#af73f71b2f40a9aa6a3cb5dbec520d119',1,'calculate_snr_internal(double *psd, std::complex&lt; double &gt; *waveform, double *frequencies, int length, std::string integration_method, double *weights, bool log10_freq):&#160;waveform_util.cpp']]],
  ['calculate_5fsnr_5fpy_35',['calculate_snr_py',['../gwatpy__wrapping_8h.html#a03ecb3d31c768a48b12ec80e40efa510',1,'calculate_snr_py(char *sensitivity_curve, char *detector, char *generation_method, gen_params_base&lt; double &gt; *params, double *frequencies, int length, char *integration_method, double *weights, bool log10_freq):&#160;gwatpy_wrapping.cpp'],['../gwatpy__wrapping_8cpp.html#a03ecb3d31c768a48b12ec80e40efa510',1,'calculate_snr_py(char *sensitivity_curve, char *detector, char *generation_method, gen_params_base&lt; double &gt; *params, double *frequencies, int length, char *integration_method, double *weights, bool log10_freq):&#160;gwatpy_wrapping.cpp']]],
  ['calculate_5fspin_5fcoefficients_5f3p5_36',['calculate_spin_coefficients_3p5',['../classIMRPhenomD__NRT.html#a7226268de2bc317721d8d7dfb77bf8eb',1,'IMRPhenomD_NRT']]],
  ['calculate_5ftime_5fshift_37',['calculate_time_shift',['../classIMRPhenomPv2.html#a326eaa63c365113abfa37830f0a0f42f',1,'IMRPhenomPv2::calculate_time_shift(source_parameters&lt; T &gt; *params, useful_powers&lt; T &gt; *pows, T *pn_phase_coeffs, lambda_parameters&lt; T &gt; *lambda)'],['../classIMRPhenomPv2.html#adfb9a401dc1f5a162de77649d302b07b',1,'IMRPhenomPv2::calculate_time_shift(source_parameters&lt; double &gt; *params, useful_powers&lt; double &gt; *pows, double *pn_phase_coeffs, lambda_parameters&lt; double &gt; *lambda)'],['../classIMRPhenomPv2.html#abe6a6a44c341ad3f99deecce5eef945f',1,'IMRPhenomPv2::calculate_time_shift(source_parameters&lt; adouble &gt; *params, useful_powers&lt; adouble &gt; *pows, adouble *pn_phase_coeffs, lambda_parameters&lt; adouble &gt; *lambda)']]],
  ['calculate_5ftwistup_38',['calculate_twistup',['../classIMRPhenomPv2.html#a2f7dc5cbc5451036e15b7eaa3e170f96',1,'IMRPhenomPv2']]],
  ['cartesiantopolar_39',['CartesianToPolar',['../IMRPhenomPv3utils_8h.html#a10f73824856147ec78f382d78e470d1c',1,'CartesianToPolar(T *polar, T *azimuthal, T *magnitude, T x, T y, T z):&#160;IMRPhenomPv3utils.cpp'],['../IMRPhenomPv3utils_8cpp.html#a10f73824856147ec78f382d78e470d1c',1,'CartesianToPolar(T *polar, T *azimuthal, T *magnitude, T x, T y, T z):&#160;IMRPhenomPv3utils.cpp']]],
  ['cartesiantopolar_3c_20adouble_20_3e_40',['CartesianToPolar&lt; adouble &gt;',['../IMRPhenomPv3utils_8cpp.html#a10653e1f95cf9dbc91dd44f0c888ff6b',1,'IMRPhenomPv3utils.cpp']]],
  ['cartesiantopolar_3c_20double_20_3e_41',['CartesianToPolar&lt; double &gt;',['../IMRPhenomPv3utils_8cpp.html#a7456f2653196eea2497b2e171d2edbf6',1,'IMRPhenomPv3utils.cpp']]],
  ['cbrt_5finternal_42',['cbrt_internal',['../util_8h.html#a9e568dd0950bb2aa1ae125c8153b8f4e',1,'cbrt_internal(double base):&#160;util.cpp'],['../util_8h.html#a8dfef0b07ebb62c8d9f1f70624fa3e00',1,'cbrt_internal(adouble base):&#160;util.cpp'],['../util_8cpp.html#a9e568dd0950bb2aa1ae125c8153b8f4e',1,'cbrt_internal(double base):&#160;util.cpp'],['../util_8cpp.html#a8dfef0b07ebb62c8d9f1f70624fa3e00',1,'cbrt_internal(adouble base):&#160;util.cpp']]],
  ['celestial_5fhorizon_5ftransform_43',['celestial_horizon_transform',['../detector__util_8h.html#af252cb74fb621c53ebe8db50f58841d2',1,'celestial_horizon_transform(T RA, T DEC, double gps_time, std::string detector, T *phi, T *theta):&#160;detector_util.cpp'],['../util_8h.html#a55f693ec3edcca174373eb928d513dbc',1,'celestial_horizon_transform(T RA, T DEC, double gps_time, T LONG, T LAT, T *phi, T *theta):&#160;util.cpp'],['../detector__util_8cpp.html#af252cb74fb621c53ebe8db50f58841d2',1,'celestial_horizon_transform(T RA, T DEC, double gps_time, std::string detector, T *phi, T *theta):&#160;detector_util.cpp'],['../util_8cpp.html#a55f693ec3edcca174373eb928d513dbc',1,'celestial_horizon_transform(T RA, T DEC, double gps_time, T LONG, T LAT, T *phi, T *theta):&#160;util.cpp']]],
  ['celestial_5fhorizon_5ftransform_3c_20adouble_20_3e_44',['celestial_horizon_transform&lt; adouble &gt;',['../detector__util_8cpp.html#a11feb0b677f16d38dce2849f8e5cbe0b',1,'celestial_horizon_transform&lt; adouble &gt;(adouble, adouble, double, std::string, adouble *, adouble *):&#160;detector_util.cpp'],['../util_8cpp.html#ac82080323054f486d8c398ea1702885e',1,'celestial_horizon_transform&lt; adouble &gt;(adouble, adouble, double, adouble, adouble, adouble *, adouble *):&#160;util.cpp']]],
  ['celestial_5fhorizon_5ftransform_3c_20double_20_3e_45',['celestial_horizon_transform&lt; double &gt;',['../detector__util_8cpp.html#a5f096f1516ac430304aaa107e98140f1',1,'celestial_horizon_transform&lt; double &gt;(double, double, double, std::string, double *, double *):&#160;detector_util.cpp'],['../util_8cpp.html#a30b977ce58c9bc3db6e8f40b38f4441d',1,'celestial_horizon_transform&lt; double &gt;(double, double, double, double, double, double *, double *):&#160;util.cpp']]],
  ['chain_5fnumber_5ffrom_5fcheckpoint_5ffile_46',['chain_number_from_checkpoint_file',['../mcmc__sampler__internals_8h.html#aecfd6c1ef213a233c95a98ae87897123',1,'chain_number_from_checkpoint_file(std::string check_file, int *chain_N):&#160;mcmc_sampler_internals.cpp'],['../mcmc__sampler__internals_8cpp.html#aecfd6c1ef213a233c95a98ae87897123',1,'chain_number_from_checkpoint_file(std::string check_file, int *chain_N):&#160;mcmc_sampler_internals.cpp']]],
  ['chain_5fswap_47',['chain_swap',['../mcmc__sampler__internals_8h.html#a69ecce233e33a549d03ee2c47fb5bbd7',1,'chain_swap(sampler *sampler, double ***output, int ***param_status, int **model_status, int step_num, int *swp_accepted, int *swp_rejected):&#160;mcmc_sampler_internals.cpp'],['../mcmc__sampler__internals_8cpp.html#a69ecce233e33a549d03ee2c47fb5bbd7',1,'chain_swap(sampler *sampler, double ***output, int ***param_status, int **model_status, int step_num, int *swp_accepted, int *swp_rejected):&#160;mcmc_sampler_internals.cpp']]],
  ['check_5fextra_5fpolarizations_48',['check_extra_polarizations',['../waveform__generator_8h.html#a85b36b24395704803353e56be3359a0a',1,'check_extra_polarizations(std::string generation_method):&#160;waveform_generator.cpp'],['../waveform__generator_8cpp.html#a85b36b24395704803353e56be3359a0a',1,'check_extra_polarizations(std::string generation_method):&#160;waveform_generator.cpp']]],
  ['check_5flist_49',['check_list',['../util_8h.html#a9631c2bd8b5493af4df2528a44886fc6',1,'check_list(T j, T *list, int length):&#160;util.h'],['../util_8cpp.html#ae7fa9c0c5b0651c57a06f72d33e616aa',1,'check_list(int j, int *list, int length):&#160;util.cpp'],['../util_8cpp.html#aba7681dc472883486d537e2367161089',1,'check_list(std::string j, std::string *list, int length):&#160;util.cpp'],['../util_8cpp.html#abe312a5d2dc5422b85bf620f99fdb0cb',1,'check_list(double j, double *list, int length):&#160;util.cpp']]],
  ['check_5flist_5fid_50',['check_list_id',['../util_8h.html#af81850392cb5ff136ea8d334952844e0',1,'check_list_id(T j, T *list, int length):&#160;util.h'],['../util_8cpp.html#aeb291321dee3d3ae3e1834a5ccbbc006',1,'check_list_id(int j, int *list, int length):&#160;util.cpp'],['../util_8cpp.html#aeef8addb40e9069e4c3cd34126faf16b',1,'check_list_id(double j, double *list, int length):&#160;util.cpp']]],
  ['check_5fmod_51',['check_mod',['../ppE__utilities_8h.html#a44e97e344b2c1bce3ec660f34eef801d',1,'ppE_utilities.h']]],
  ['check_5fnum_5fpolar_52',['check_num_polar',['../ppE__utilities_8h.html#a17c60fbdd4679c5967d9d2a5e890c881',1,'ppE_utilities.h']]],
  ['check_5fsampler_5fstatus_53',['check_sampler_status',['../mcmc__sampler__internals_8h.html#a00a4c2a3dcd245bd563ec73963553421',1,'check_sampler_status(sampler *samplerptr):&#160;mcmc_sampler_internals.cpp'],['../mcmc__sampler__internals_8cpp.html#a00a4c2a3dcd245bd563ec73963553421',1,'check_sampler_status(sampler *samplerptr):&#160;mcmc_sampler_internals.cpp']]],
  ['check_5ftheory_5fsupport_54',['check_theory_support',['../ppE__utilities_8h.html#a970359c34a6905c8cd08b306d875de04',1,'ppE_utilities.h']]],
  ['checkomegaz5_55',['checkOmegaz5',['../IMRPhenomPv3utils_8h.html#afe6bd2c48556faafc712e103adce1ce3',1,'checkOmegaz5(const T Omegaz5):&#160;IMRPhenomPv3utils.cpp'],['../IMRPhenomPv3utils_8cpp.html#afe6bd2c48556faafc712e103adce1ce3',1,'checkOmegaz5(const T Omegaz5):&#160;IMRPhenomPv3utils.cpp']]],
  ['checkomegaz5_3c_20adouble_20_3e_56',['checkOmegaz5&lt; adouble &gt;',['../IMRPhenomPv3utils_8cpp.html#a5eba70e7d859d24406f36542015b6310',1,'IMRPhenomPv3utils.cpp']]],
  ['checkomegaz5_3c_20double_20_3e_57',['checkOmegaz5&lt; double &gt;',['../IMRPhenomPv3utils_8cpp.html#ab04a3eb460ade072ff2071ca0eda18fe',1,'IMRPhenomPv3utils.cpp']]],
  ['chirpmass_5feta_5fjac_58',['chirpmass_eta_jac',['../standardPriorLibrary_8h.html#a293d10aca3cd12aca77ca88f16a65911',1,'chirpmass_eta_jac(double chirpmass, double eta):&#160;standardPriorLibrary.cpp'],['../standardPriorLibrary_8cpp.html#a293d10aca3cd12aca77ca88f16a65911',1,'chirpmass_eta_jac(double chirpmass, double eta):&#160;standardPriorLibrary.cpp']]],
  ['chirpmass_5fq_5fjac_59',['chirpmass_q_jac',['../standardPriorLibrary_8h.html#ac5e2d4ee2f24c1a7cdc5aaadaeebbbcd',1,'chirpmass_q_jac(double chirpmass, double q):&#160;standardPriorLibrary.cpp'],['../standardPriorLibrary_8cpp.html#ac5e2d4ee2f24c1a7cdc5aaadaeebbbcd',1,'chirpmass_q_jac(double chirpmass, double q):&#160;standardPriorLibrary.cpp']]],
  ['cleanup_5fsource_5fparameters_60',['cleanup_source_parameters',['../waveform__generator_8h.html#a139aeba44f4f5abea770ad8eae133b53',1,'cleanup_source_parameters(source_parameters&lt; T &gt; *params, std::string generation_method):&#160;waveform_generator.cpp'],['../waveform__generator_8cpp.html#a139aeba44f4f5abea770ad8eae133b53',1,'cleanup_source_parameters(source_parameters&lt; T &gt; *params, std::string generation_method):&#160;waveform_generator.cpp'],['../waveform__generator_8cpp.html#aae6f447b50b19bf067e199b7f9767594',1,'cleanup_source_parameters(source_parameters&lt; adouble &gt; *, std::string):&#160;waveform_generator.cpp'],['../waveform__generator_8cpp.html#ae913822e458dc0961402cd0bfee34e2f',1,'cleanup_source_parameters(source_parameters&lt; double &gt; *, std::string):&#160;waveform_generator.cpp']]],
  ['combine_5fchain_5fevidence_61',['combine_chain_evidence',['../mcmc__sampler__internals_8h.html#a336c7f43243e182f7de09276993d5540',1,'combine_chain_evidence(sampler *samplerptr, double *evidences, int *total_terms, int ensemble_size):&#160;mcmc_sampler_internals.cpp'],['../mcmc__sampler__internals_8cpp.html#a336c7f43243e182f7de09276993d5540',1,'combine_chain_evidence(sampler *samplerptr, double *evidences, int *total_terms, int ensemble_size):&#160;mcmc_sampler_internals.cpp']]],
  ['compute_5fphiz_5fzeta_5fcosthetal3pn_62',['compute_phiz_zeta_costhetaL3PN',['../IMRPhenomPv3utils_8h.html#a8c2f36534aeb663c7099c7f40da1da97',1,'compute_phiz_zeta_costhetaL3PN(const T xi, const sysprecquant&lt; T &gt; *system):&#160;IMRPhenomPv3utils.cpp'],['../IMRPhenomPv3utils_8cpp.html#a8c2f36534aeb663c7099c7f40da1da97',1,'compute_phiz_zeta_costhetaL3PN(const T xi, const sysprecquant&lt; T &gt; *system):&#160;IMRPhenomPv3utils.cpp']]],
  ['compute_5fphiz_5fzeta_5fcosthetal3pn_3c_20adouble_20_3e_63',['compute_phiz_zeta_costhetaL3PN&lt; adouble &gt;',['../IMRPhenomPv3utils_8cpp.html#a3018af8114c3aad0b8f3e59ee68796b6',1,'IMRPhenomPv3utils.cpp']]],
  ['compute_5fphiz_5fzeta_5fcosthetal3pn_3c_20double_20_3e_64',['compute_phiz_zeta_costhetaL3PN&lt; double &gt;',['../IMRPhenomPv3utils_8cpp.html#a5015f6f64d0eb0c635a2241e55125631',1,'IMRPhenomPv3utils.cpp']]],
  ['computemscorrections_65',['computeMScorrections',['../IMRPhenomPv3utils_8h.html#a9d9273f0ef645d7d5e0f536b3403bfa8',1,'computeMScorrections(const T xi, const T xi_2, const T L_norm, const T J_norm, const vector3D&lt; T &gt; roots, const sysprecquant&lt; T &gt; *system):&#160;IMRPhenomPv3utils.cpp'],['../IMRPhenomPv3utils_8cpp.html#a9d9273f0ef645d7d5e0f536b3403bfa8',1,'computeMScorrections(const T xi, const T xi_2, const T L_norm, const T J_norm, const vector3D&lt; T &gt; roots, const sysprecquant&lt; T &gt; *system):&#160;IMRPhenomPv3utils.cpp']]],
  ['computemscorrections_3c_20adouble_20_3e_66',['computeMScorrections&lt; adouble &gt;',['../IMRPhenomPv3utils_8cpp.html#a513d037292b2d08595bf1ede86325119',1,'IMRPhenomPv3utils.cpp']]],
  ['computemscorrections_3c_20double_20_3e_67',['computeMScorrections&lt; double &gt;',['../IMRPhenomPv3utils_8cpp.html#ae3f52819a302b5a48ad230aad2e9e26d',1,'IMRPhenomPv3utils.cpp']]],
  ['construct_5famplitude_68',['construct_amplitude',['../classEA__IMRPhenomD__NRT.html#ae258ae2683b5d6cc58b0ac4b990248ae',1,'EA_IMRPhenomD_NRT::construct_amplitude()'],['../classIMRPhenomPv3.html#a31943bd0bad321fe005106d5329d248a',1,'IMRPhenomPv3::construct_amplitude()']]],
  ['construct_5fphase_69',['construct_phase',['../classEA__IMRPhenomD__NRT.html#affc448353d6a4bea099dacc7b19850f1',1,'EA_IMRPhenomD_NRT::construct_phase()'],['../classIMRPhenomPv2.html#a05877c187dedd47f2479939907b4b2e9',1,'IMRPhenomPv2::construct_phase()']]],
  ['construct_5fwaveform_70',['construct_waveform',['../classEA__IMRPhenomD__NRT.html#a5d0dafd72815a4a560f81af2b3640c9d',1,'EA_IMRPhenomD_NRT::construct_waveform()'],['../classIMRPhenomD__NRT.html#a144935f45c3ebe0baf0c8adecf5e70e0',1,'IMRPhenomD_NRT::construct_waveform()'],['../classIMRPhenomPv2.html#af147bf8756311a9386b3f9bcdefa7dd5',1,'IMRPhenomPv2::construct_waveform()'],['../classIMRPhenomPv3.html#a890901366c086d3c716573e9c83b68d0',1,'IMRPhenomPv3::construct_waveform()'],['../classTaylorT2.html#aeea453c2ebdad52c0135b22ed5691cb4',1,'TaylorT2::construct_waveform()']]],
  ['construct_5fwaveform_5fderivative_71',['construct_waveform_derivative',['../fisher_8h.html#a15b0abe98fd48389109099d6ac58c9a6',1,'fisher.h']]],
  ['continue_5fptmcmc_5fmh_72',['continue_PTMCMC_MH',['../mcmc__sampler_8h.html#a66e5b1749c47cc37210f2f150e6ecbe1',1,'continue_PTMCMC_MH(std::string start_checkpoint_file, double ***output, int N_steps, int swp_freq, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), double(*log_likelihood)(double *param, mcmc_data_interface *interface, void *parameters), void(*fisher)(double *param, double **fisher, mcmc_data_interface *interface, void *parameters), void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string end_checkpoint_file, bool tune):&#160;mcmc_sampler.h'],['../mcmc__sampler_8cpp.html#a8d8b51c3535a0132f679ead421a1cb11',1,'continue_PTMCMC_MH(std::string start_checkpoint_file, double ***output, int N_steps, int swp_freq, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), double(*log_likelihood)(double *param, mcmc_data_interface *interface, void *parameters), void(*fisher)(double *param, double **fisher, mcmc_data_interface *, void *parameters), void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string end_checkpoint_file, bool tune):&#160;mcmc_sampler.cpp']]],
  ['continue_5fptmcmc_5fmh_5fdynamic_5fpt_5falloc_73',['continue_PTMCMC_MH_dynamic_PT_alloc',['../mcmc__sampler_8h.html#a4d24290908009c5814462bb30919acd4',1,'continue_PTMCMC_MH_dynamic_PT_alloc(std::string checkpoint_file_start, double ***output, int N_steps, int max_chain_N_thermo_ensemble, double *chain_temps, int swp_freq, int t0, int nu, std::string chain_distribution_scheme, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), double(*log_likelihood)(double *param, mcmc_data_interface *interface, void *parameters), void(*fisher)(double *param, double **fisher, mcmc_data_interface *interface, void *parameters), void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string checkpoint_file):&#160;mcmc_sampler.cpp'],['../mcmc__sampler_8cpp.html#a4d24290908009c5814462bb30919acd4',1,'continue_PTMCMC_MH_dynamic_PT_alloc(std::string checkpoint_file_start, double ***output, int N_steps, int max_chain_N_thermo_ensemble, double *chain_temps, int swp_freq, int t0, int nu, std::string chain_distribution_scheme, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), double(*log_likelihood)(double *param, mcmc_data_interface *interface, void *parameters), void(*fisher)(double *param, double **fisher, mcmc_data_interface *interface, void *parameters), void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string checkpoint_file):&#160;mcmc_sampler.cpp']]],
  ['continue_5fptmcmc_5fmh_5fdynamic_5fpt_5falloc_5ffull_5fensemble_5finternal_74',['continue_PTMCMC_MH_dynamic_PT_alloc_full_ensemble_internal',['../mcmc__sampler_8h.html#a72b86c3238a2196fee3b178b4f65003b',1,'continue_PTMCMC_MH_dynamic_PT_alloc_full_ensemble_internal(std::string checkpoint_file_start, double ***output, int N_steps, double *chain_temps, int swp_freq, int t0, int nu, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string checkpoint_file, bool burn_phase):&#160;mcmc_sampler.cpp'],['../mcmc__sampler_8cpp.html#a72b86c3238a2196fee3b178b4f65003b',1,'continue_PTMCMC_MH_dynamic_PT_alloc_full_ensemble_internal(std::string checkpoint_file_start, double ***output, int N_steps, double *chain_temps, int swp_freq, int t0, int nu, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string checkpoint_file, bool burn_phase):&#160;mcmc_sampler.cpp']]],
  ['continue_5fptmcmc_5fmh_5fdynamic_5fpt_5falloc_5finternal_75',['continue_PTMCMC_MH_dynamic_PT_alloc_internal',['../mcmc__sampler_8h.html#a15891ba0ef63813d73827390029cacc3',1,'continue_PTMCMC_MH_dynamic_PT_alloc_internal(std::string checkpoint_file_start, double ***output, int N_steps, int max_chain_N_thermo_ensemble, double *chain_temps, int swp_freq, int t0, int nu, std::string chain_distribution_scheme, std::function&lt; double(double *, int *, int, mcmc_data_interface *interface, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *interface, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *interface, void *)&gt;fisher, void **user_parameters, int numThreads, bool pool, bool show_prog, bool dynamic_chain_number, std::string statistics_filename, std::string chain_filename, std::string checkpoint_file, bool burn_phase):&#160;mcmc_sampler.h'],['../mcmc__sampler_8cpp.html#a2721ee2d9aa8654731a9e6b55cb449cd',1,'continue_PTMCMC_MH_dynamic_PT_alloc_internal(std::string checkpoint_file_start, double ***output, int N_steps, int max_chain_N_thermo_ensemble, double *chain_temps, int swp_freq, int t0, int nu, std::string chain_distribution_scheme, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, void **user_parameters, int numThreads, bool pool, bool show_prog, bool dynamic_chain_number, std::string statistics_filename, std::string chain_filename, std::string checkpoint_file, bool burn_phase):&#160;mcmc_sampler.cpp']]],
  ['continue_5fptmcmc_5fmh_5fdynamic_5fpt_5falloc_5funcorrelated_76',['continue_PTMCMC_MH_dynamic_PT_alloc_uncorrelated',['../mcmc__sampler_8h.html#a83b77ee03b2d579a2cad448d2d6dd4d1',1,'continue_PTMCMC_MH_dynamic_PT_alloc_uncorrelated(std::string checkpoint_file_start, mcmc_sampler_output *sampler_output, double **output, int N_steps, int max_chain_N_thermo_ensemble, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), double(*log_likelihood)(double *param, mcmc_data_interface *interface, void *parameters), void(*fisher)(double *param, double **fisher, mcmc_data_interface *interface, void *parameters), void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_file):&#160;mcmc_sampler.h'],['../mcmc__sampler_8cpp.html#afd7ab5cf31ab4ae3af72bf7877b7ade4',1,'continue_PTMCMC_MH_dynamic_PT_alloc_uncorrelated(std::string checkpoint_file_start, mcmc_sampler_output *sampler_output, double **output, int N_steps, int max_chain_N_thermo_ensemble, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, double(*log_prior)(double *param, mcmc_data_interface *, void *parameters), double(*log_likelihood)(double *param, mcmc_data_interface *, void *parameters), void(*fisher)(double *param, double **fisher, mcmc_data_interface *, void *parameters), void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_file):&#160;mcmc_sampler.cpp']]],
  ['continue_5fptmcmc_5fmh_5fdynamic_5fpt_5falloc_5funcorrelated_5fgw_77',['continue_PTMCMC_MH_dynamic_PT_alloc_uncorrelated_GW',['../mcmc__gw_8h.html#aef24e17d7806e8fd654c50d0fc5e75d9',1,'continue_PTMCMC_MH_dynamic_PT_alloc_uncorrelated_GW(std::string checkpoint_file_start, mcmc_sampler_output *sampler_output, double **output, int N_steps, int max_chain_N_thermo_ensemble, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), int numThreads, bool pool, bool show_prog, int num_detectors, std::complex&lt; double &gt; **data, double **noise_psd, double **frequencies, int *data_length, double gps_time, std::string *detectors, MCMC_modification_struct *mod_struct, std::string generation_method, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_filename):&#160;mcmc_gw.cpp'],['../mcmc__gw_8cpp.html#aef24e17d7806e8fd654c50d0fc5e75d9',1,'continue_PTMCMC_MH_dynamic_PT_alloc_uncorrelated_GW(std::string checkpoint_file_start, mcmc_sampler_output *sampler_output, double **output, int N_steps, int max_chain_N_thermo_ensemble, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), int numThreads, bool pool, bool show_prog, int num_detectors, std::complex&lt; double &gt; **data, double **noise_psd, double **frequencies, int *data_length, double gps_time, std::string *detectors, MCMC_modification_struct *mod_struct, std::string generation_method, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_filename):&#160;mcmc_gw.cpp']]],
  ['continue_5fptmcmc_5fmh_5fdynamic_5fpt_5falloc_5funcorrelated_5finternal_78',['continue_PTMCMC_MH_dynamic_PT_alloc_uncorrelated_internal',['../mcmc__sampler_8h.html#a4ce4b27a8ef5df0063d34c1dd772758b',1,'continue_PTMCMC_MH_dynamic_PT_alloc_uncorrelated_internal(std::string checkpoint_file_start, mcmc_sampler_output *sampler_output, double **output, int N_steps, int max_chain_N_thermo_ensemble, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_file):&#160;mcmc_sampler.cpp'],['../mcmc__sampler_8cpp.html#a4ce4b27a8ef5df0063d34c1dd772758b',1,'continue_PTMCMC_MH_dynamic_PT_alloc_uncorrelated_internal(std::string checkpoint_file_start, mcmc_sampler_output *sampler_output, double **output, int N_steps, int max_chain_N_thermo_ensemble, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_file):&#160;mcmc_sampler.cpp']]],
  ['continue_5fptmcmc_5fmh_5fgw_79',['continue_PTMCMC_MH_GW',['../mcmc__gw_8h.html#ae7d4afdc2e889cb9f5fee52e48de0256',1,'continue_PTMCMC_MH_GW(std::string start_checkpoint_file, double ***output, int dimension, int N_steps, int swp_freq, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), int numThreads, bool pool, bool show_prog, int num_detectors, std::complex&lt; double &gt; **data, double **noise_psd, double **frequencies, int *data_length, double gps_time, std::string *detector, MCMC_modification_struct *mod_struct, std::string generation_method, std::string statistics_filename, std::string chain_filename, std::string auto_corr_filename, std::string likelihood_log_filename, std::string final_checkpoint_filename, bool tune):&#160;mcmc_gw.cpp'],['../mcmc__gw_8cpp.html#a1ca11d589dde02d8ca20ee0f83ff07da',1,'continue_PTMCMC_MH_GW(std::string start_checkpoint_file, double ***output, int dimension, int N_steps, int swp_freq, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), int numThreads, bool pool, bool show_prog, int num_detectors, std::complex&lt; double &gt; **data, double **noise_psd, double **frequencies, int *data_length, double gps_time, std::string *detectors, MCMC_modification_struct *mod_struct, std::string generation_method, std::string statistics_filename, std::string chain_filename, std::string auto_corr_filename, std::string likelihood_log_filename, std::string final_checkpoint_filename, bool tune):&#160;mcmc_gw.cpp']]],
  ['continue_5fptmcmc_5fmh_5finternal_80',['continue_PTMCMC_MH_internal',['../mcmc__sampler_8h.html#a963cd9768490e99fa719304883e155c1',1,'continue_PTMCMC_MH_internal(sampler *samplerptr, std::string start_checkpoint_file, double ***output, int N_steps, int swp_freq, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string end_checkpoint_file, bool tune, bool burn_phase):&#160;mcmc_sampler.cpp'],['../mcmc__sampler_8cpp.html#a7926dfdd4d83574120347d2acd38b566',1,'continue_PTMCMC_MH_internal(sampler *sampler_in, std::string start_checkpoint_file, double ***output, int N_steps, int swp_freq, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string end_checkpoint_file, bool tune, bool burn_phase):&#160;mcmc_sampler.cpp']]],
  ['continue_5fptmcmc_5fmh_5fsimulated_5fannealing_5finternal_81',['continue_PTMCMC_MH_simulated_annealing_internal',['../mcmc__sampler_8cpp.html#ab901f911e1e037e0b7c3a38506580a57',1,'mcmc_sampler.cpp']]],
  ['continue_5frjptmcmc_5fmh_82',['continue_RJPTMCMC_MH',['../mcmc__sampler_8h.html#a4372432f950212e7bca3ba37452e01de',1,'continue_RJPTMCMC_MH(std::string start_checkpoint_file, double ***output, int ***status, int **model_status, int nested_model_number, int N_steps, int swp_freq, double(*log_prior)(double *param, int *status, int model_status, mcmc_data_interface *interface, void *parameters), double(*log_likelihood)(double *param, int *status, int model_status, mcmc_data_interface *interface, void *parameters), void(*fisher)(double *param, int *status, int model_status, double **fisher, mcmc_data_interface *interface, void *parameters), void(*RJ_proposal)(double *current_param, double *proposed_param, int *current_status, int *proposed_status, int *current_model_status, int *proposed_model_status, double *MH_corrections, mcmc_data_interface *interface, void *parameters), void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string auto_corr_filename, std::string likelihood_log_filename, std::string end_checkpoint_file):&#160;mcmc_sampler.cpp'],['../mcmc__sampler_8cpp.html#a4372432f950212e7bca3ba37452e01de',1,'continue_RJPTMCMC_MH(std::string start_checkpoint_file, double ***output, int ***status, int **model_status, int nested_model_number, int N_steps, int swp_freq, double(*log_prior)(double *param, int *status, int model_status, mcmc_data_interface *interface, void *parameters), double(*log_likelihood)(double *param, int *status, int model_status, mcmc_data_interface *interface, void *parameters), void(*fisher)(double *param, int *status, int model_status, double **fisher, mcmc_data_interface *interface, void *parameters), void(*RJ_proposal)(double *current_param, double *proposed_param, int *current_status, int *proposed_status, int *current_model_status, int *proposed_model_status, double *MH_corrections, mcmc_data_interface *interface, void *parameters), void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string auto_corr_filename, std::string likelihood_log_filename, std::string end_checkpoint_file):&#160;mcmc_sampler.cpp']]],
  ['continue_5frjptmcmc_5fmh_5fdynamic_5fpt_5falloc_5fcomprehensive_83',['continue_RJPTMCMC_MH_dynamic_PT_alloc_comprehensive',['../mcmc__sampler_8h.html#a893422a951aee038b73d1fc2ad437148',1,'continue_RJPTMCMC_MH_dynamic_PT_alloc_comprehensive(std::string checkpoint_file_start, mcmc_sampler_output *sampler_output, double **output, int **parameter_status, int *model_status, int nested_model_number, int N_steps, int max_chain_N_thermo_ensemble, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, double(*log_prior)(double *param, int *status, int model_status, mcmc_data_interface *interface, void *parameters), double(*log_likelihood)(double *param, int *status, int model_status, mcmc_data_interface *interface, void *parameters), void(*fisher)(double *param, int *status, int model_status, double **fisher, mcmc_data_interface *interface, void *parameters), void(*RJ_proposal)(double *current_param, double *proposed_param, int *current_status, int *proposed_status, int *current_model_status, int *proposed_model_status, double *MH_corrections, mcmc_data_interface *interface, void *parameters), void **user_parameters, int numThreads, bool pool, bool show_prog, bool update_RJ_width, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_file):&#160;mcmc_sampler.cpp'],['../mcmc__sampler_8cpp.html#a893422a951aee038b73d1fc2ad437148',1,'continue_RJPTMCMC_MH_dynamic_PT_alloc_comprehensive(std::string checkpoint_file_start, mcmc_sampler_output *sampler_output, double **output, int **parameter_status, int *model_status, int nested_model_number, int N_steps, int max_chain_N_thermo_ensemble, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, double(*log_prior)(double *param, int *status, int model_status, mcmc_data_interface *interface, void *parameters), double(*log_likelihood)(double *param, int *status, int model_status, mcmc_data_interface *interface, void *parameters), void(*fisher)(double *param, int *status, int model_status, double **fisher, mcmc_data_interface *interface, void *parameters), void(*RJ_proposal)(double *current_param, double *proposed_param, int *current_status, int *proposed_status, int *current_model_status, int *proposed_model_status, double *MH_corrections, mcmc_data_interface *interface, void *parameters), void **user_parameters, int numThreads, bool pool, bool show_prog, bool update_RJ_width, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_file):&#160;mcmc_sampler.cpp']]],
  ['continue_5frjptmcmc_5fmh_5fdynamic_5fpt_5falloc_5fcomprehensive_5f2wf_5fgw_84',['continue_RJPTMCMC_MH_dynamic_PT_alloc_comprehensive_2WF_GW',['../mcmc__gw_8h.html#aa535271c0b4b8f946a1a17a5a58d785d',1,'continue_RJPTMCMC_MH_dynamic_PT_alloc_comprehensive_2WF_GW(std::string checkpoint_file_start, mcmc_sampler_output *sampler_output, double **output, int **status, int *model_status, int nested_model_number, int N_steps, int max_chain_N_thermo_ensemble, double **prior_ranges, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, double(*log_prior)(double *param, int *status, int model_status, mcmc_data_interface *interface, void *parameters), int numThreads, bool pool, bool show_prog, int num_detectors, std::complex&lt; double &gt; **data, double **noise_psd, double **frequencies, int *data_length, double gps_time, std::string *detectors, MCMC_modification_struct *mod_struct, std::string generation_method_base, std::string generation_method_extended, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_filename):&#160;mcmc_gw.cpp'],['../mcmc__gw_8cpp.html#aa535271c0b4b8f946a1a17a5a58d785d',1,'continue_RJPTMCMC_MH_dynamic_PT_alloc_comprehensive_2WF_GW(std::string checkpoint_file_start, mcmc_sampler_output *sampler_output, double **output, int **status, int *model_status, int nested_model_number, int N_steps, int max_chain_N_thermo_ensemble, double **prior_ranges, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, double(*log_prior)(double *param, int *status, int model_status, mcmc_data_interface *interface, void *parameters), int numThreads, bool pool, bool show_prog, int num_detectors, std::complex&lt; double &gt; **data, double **noise_psd, double **frequencies, int *data_length, double gps_time, std::string *detectors, MCMC_modification_struct *mod_struct, std::string generation_method_base, std::string generation_method_extended, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_filename):&#160;mcmc_gw.cpp']]],
  ['continue_5frjptmcmc_5fmh_5fdynamic_5fpt_5falloc_5fcomprehensive_5finternal_85',['continue_RJPTMCMC_MH_dynamic_PT_alloc_comprehensive_internal',['../mcmc__sampler_8h.html#a54c318804a7b40ef539f778a650fadbc',1,'continue_RJPTMCMC_MH_dynamic_PT_alloc_comprehensive_internal(std::string checkpoint_file_start, mcmc_sampler_output *sampler_output, double **output, int **parameter_status, int *model_status, int nested_model_number, int N_steps, int max_chain_N_thermo_ensemble, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, std::function&lt; void(double *, double *, int *, int *, int *, int *, double *, mcmc_data_interface *, void *)&gt; RJ_proposal, void **user_parameters, int numThreads, bool pool, bool show_prog, bool update_RJ_width, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_file):&#160;mcmc_sampler.cpp'],['../mcmc__sampler_8cpp.html#a54c318804a7b40ef539f778a650fadbc',1,'continue_RJPTMCMC_MH_dynamic_PT_alloc_comprehensive_internal(std::string checkpoint_file_start, mcmc_sampler_output *sampler_output, double **output, int **parameter_status, int *model_status, int nested_model_number, int N_steps, int max_chain_N_thermo_ensemble, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, std::function&lt; void(double *, double *, int *, int *, int *, int *, double *, mcmc_data_interface *, void *)&gt; RJ_proposal, void **user_parameters, int numThreads, bool pool, bool show_prog, bool update_RJ_width, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_file):&#160;mcmc_sampler.cpp']]],
  ['continue_5frjptmcmc_5fmh_5fdynamic_5fpt_5falloc_5ffull_5fensemble_5finternal_86',['continue_RJPTMCMC_MH_dynamic_PT_alloc_full_ensemble_internal',['../mcmc__sampler_8h.html#ac1c1f521b8332637fe251be7925e62f6',1,'continue_RJPTMCMC_MH_dynamic_PT_alloc_full_ensemble_internal(std::string checkpoint_file_start, double ***output, int ***status, int **model_status, int nested_model_number, int N_steps, double *chain_temps, int swp_freq, int t0, int nu, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, std::function&lt; void(double *, double *, int *, int *, int *, int *, double *, mcmc_data_interface *, void *)&gt; RJ_proposal, void **user_parameters, int numThreads, bool pool, bool show_prog, bool update_RJ_width, std::string statistics_filename, std::string chain_filename, std::string checkpoint_file, bool burn_phase):&#160;mcmc_sampler.cpp'],['../mcmc__sampler_8cpp.html#ac1c1f521b8332637fe251be7925e62f6',1,'continue_RJPTMCMC_MH_dynamic_PT_alloc_full_ensemble_internal(std::string checkpoint_file_start, double ***output, int ***status, int **model_status, int nested_model_number, int N_steps, double *chain_temps, int swp_freq, int t0, int nu, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, std::function&lt; void(double *, double *, int *, int *, int *, int *, double *, mcmc_data_interface *, void *)&gt; RJ_proposal, void **user_parameters, int numThreads, bool pool, bool show_prog, bool update_RJ_width, std::string statistics_filename, std::string chain_filename, std::string checkpoint_file, bool burn_phase):&#160;mcmc_sampler.cpp']]],
  ['continue_5frjptmcmc_5fmh_5finternal_87',['continue_RJPTMCMC_MH_internal',['../mcmc__sampler_8h.html#a1bb37ac5c89dcce93f2469c448f90619',1,'continue_RJPTMCMC_MH_internal(sampler *samplerptr, std::string start_checkpoint_file, double ***output, int ***status, int **model_status, int nested_model_number, int N_steps, int swp_freq, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, std::function&lt; void(double *, double *, int *, int *, int *, int *, double *, mcmc_data_interface *, void *)&gt; RJ_proposal, void **user_parameters, int numThreads, bool pool, bool show_prog, bool update_RJ_width, std::string statistics_filename, std::string chain_filename, std::string auto_corr_filename, std::string likelihood_log_filename, std::string end_checkpoint_file, bool tune, bool burn_phase):&#160;mcmc_sampler.cpp'],['../mcmc__sampler_8cpp.html#a1bb37ac5c89dcce93f2469c448f90619',1,'continue_RJPTMCMC_MH_internal(sampler *samplerptr, std::string start_checkpoint_file, double ***output, int ***status, int **model_status, int nested_model_number, int N_steps, int swp_freq, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, std::function&lt; void(double *, double *, int *, int *, int *, int *, double *, mcmc_data_interface *, void *)&gt; RJ_proposal, void **user_parameters, int numThreads, bool pool, bool show_prog, bool update_RJ_width, std::string statistics_filename, std::string chain_filename, std::string auto_corr_filename, std::string likelihood_log_filename, std::string end_checkpoint_file, bool tune, bool burn_phase):&#160;mcmc_sampler.cpp']]],
  ['continue_5frjptmcmc_5fmh_5fsimulated_5fannealing_5finternal_88',['continue_RJPTMCMC_MH_simulated_annealing_internal',['../mcmc__sampler_8cpp.html#a0421138ac11e416adc9242b1cb8941f6',1,'mcmc_sampler.cpp']]],
  ['contract_5fh_89',['contract_H',['../classTaylorT2.html#a3633174aa8705c985c44393ac2d4a2a2',1,'TaylorT2']]],
  ['copy_5fbase_5fcheckpoint_5fproperties_90',['copy_base_checkpoint_properties',['../mcmc__sampler__internals_8h.html#a036d12e6378958e6b373866894a1081d',1,'copy_base_checkpoint_properties(std::string check_file, sampler *samplerptr):&#160;mcmc_sampler_internals.cpp'],['../mcmc__sampler__internals_8cpp.html#a036d12e6378958e6b373866894a1081d',1,'copy_base_checkpoint_properties(std::string check_file, sampler *samplerptr):&#160;mcmc_sampler_internals.cpp']]],
  ['copysign_5finternal_91',['copysign_internal',['../util_8h.html#a588d05c5e239cff9b87a31d20bb6aa78',1,'copysign_internal(T val, T sign):&#160;util.cpp'],['../util_8cpp.html#a588d05c5e239cff9b87a31d20bb6aa78',1,'copysign_internal(T val, T sign):&#160;util.cpp']]],
  ['copysign_5finternal_3c_20adouble_20_3e_92',['copysign_internal&lt; adouble &gt;',['../util_8cpp.html#a14378a26cefa05a8e718ee0c11b35189',1,'util.cpp']]],
  ['copysign_5finternal_3c_20double_20_3e_93',['copysign_internal&lt; double &gt;',['../util_8cpp.html#a4e97ada4e992cd5ba6ff9eec3e60deed',1,'util.cpp']]],
  ['cosmology_5finterpolation_5ffunction_94',['cosmology_interpolation_function',['../util_8h.html#afc70040a4b2855ffc42c1f8b91e87fc2',1,'cosmology_interpolation_function(double x, double *coeffs, int interp_degree):&#160;util.cpp'],['../util_8h.html#a89c3042d0c813fd58dcb6a433d26eaa4',1,'cosmology_interpolation_function(adouble x, double *coeffs, int interp_degree):&#160;util.cpp'],['../util_8cpp.html#afc70040a4b2855ffc42c1f8b91e87fc2',1,'cosmology_interpolation_function(double x, double *coeffs, int interp_degree):&#160;util.cpp'],['../util_8cpp.html#a89c3042d0c813fd58dcb6a433d26eaa4',1,'cosmology_interpolation_function(adouble x, double *coeffs, int interp_degree):&#160;util.cpp']]],
  ['cosmology_5finterpolation_5ffunction_5fmd_95',['cosmology_interpolation_function_MD',['../ppE__utilities_8h.html#a6b3dece2b84715a8d15130d7816b26bd',1,'ppE_utilities.h']]],
  ['cosmology_5flookup_96',['cosmology_lookup',['../util_8h.html#ae0af9cd9151668bb4490288655aa000b',1,'cosmology_lookup(std::string cosmology):&#160;util.cpp'],['../util_8cpp.html#ae0af9cd9151668bb4490288655aa000b',1,'cosmology_lookup(std::string cosmology):&#160;util.cpp']]],
  ['costhetal_97',['costhetaL',['../IMRPhenomPv3utils_8h.html#ae052af8f0f19d88060501e72a49fd9aa',1,'costhetaL(const T J_norm, const T L_norm, const T S_norm):&#160;IMRPhenomPv3utils.cpp'],['../IMRPhenomPv3utils_8cpp.html#ae052af8f0f19d88060501e72a49fd9aa',1,'costhetaL(const T J_norm, const T L_norm, const T S_norm):&#160;IMRPhenomPv3utils.cpp']]],
  ['costhetal_3c_20adouble_20_3e_98',['costhetaL&lt; adouble &gt;',['../IMRPhenomPv3utils_8cpp.html#a529f0bcf4acdd41020c2fef227e4971b',1,'IMRPhenomPv3utils.cpp']]],
  ['costhetal_3c_20double_20_3e_99',['costhetaL&lt; double &gt;',['../IMRPhenomPv3utils_8cpp.html#aeb906fb7bd127ff8e46b09cd107d525e',1,'IMRPhenomPv3utils.cpp']]],
  ['count_5fcold_5fchains_100',['count_cold_chains',['../mcmc__sampler__internals_8h.html#a38318ba0da66b6bb3e316b3e541a86aa',1,'count_cold_chains(double *temps, int chain_N):&#160;mcmc_sampler_internals.cpp'],['../mcmc__sampler__internals_8cpp.html#a38318ba0da66b6bb3e316b3e541a86aa',1,'count_cold_chains(double *temps, int chain_N):&#160;mcmc_sampler_internals.cpp']]],
  ['count_5findep_5fsamples_101',['count_indep_samples',['../classmcmc__sampler__output.html#a81eadb99551983e6271900f719d198aa',1,'mcmc_sampler_output']]],
  ['count_5flines_5fdata_5ffile_102',['count_lines_data_file',['../io__util_8h.html#aabb38ec649dc87bca9ddd9ddd1baea78',1,'count_lines_data_file(std::string file, int *count):&#160;io_util.cpp'],['../io__util_8cpp.html#aabb38ec649dc87bca9ddd9ddd1baea78',1,'count_lines_data_file(std::string file, int *count):&#160;io_util.cpp']]],
  ['count_5flines_5flosc_5fdata_5ffile_103',['count_lines_LOSC_data_file',['../io__util_8h.html#a2d2ec12ff7cb75ea68ec4139513bab4c',1,'count_lines_LOSC_data_file(std::string file, int *count):&#160;io_util.cpp'],['../io__util_8cpp.html#a2d2ec12ff7cb75ea68ec4139513bab4c',1,'count_lines_LOSC_data_file(std::string file, int *count):&#160;io_util.cpp']]],
  ['count_5flines_5flosc_5fpsd_5ffile_104',['count_lines_LOSC_PSD_file',['../io__util_8h.html#aaf15f8db5f36caf636d88f41e29b17be',1,'count_lines_LOSC_PSD_file(std::string file, int *count):&#160;io_util.cpp'],['../io__util_8cpp.html#aaf15f8db5f36caf636d88f41e29b17be',1,'count_lines_LOSC_PSD_file(std::string file, int *count):&#160;io_util.cpp']]],
  ['cpolar_105',['cpolar',['../util_8h.html#a0f40353685d9834aa55982b24c6ac660',1,'cpolar(T mag, T phase):&#160;util.cpp'],['../util_8cpp.html#a0f40353685d9834aa55982b24c6ac660',1,'cpolar(T mag, T phase):&#160;util.cpp']]],
  ['cpolar_3c_20adouble_20_3e_106',['cpolar&lt; adouble &gt;',['../util_8cpp.html#a4bb7868598d7ed2fa6b596121b6c4b4e',1,'util.cpp']]],
  ['cpolar_3c_20double_20_3e_107',['cpolar&lt; double &gt;',['../util_8cpp.html#a60e38c6d474532c6dc4506d47549ebfd',1,'util.cpp']]],
  ['create_5fcoherent_5fgw_5fdetection_108',['create_coherent_GW_detection',['../waveform__util_8h.html#a7855961a7e993506d0eb6992de2946b6',1,'create_coherent_GW_detection(std::string *detectors, int detector_N, T **frequencies, int *lengths, bool reuse_WF, gen_params_base&lt; T &gt; *gen_params, std::string generation_method, std::complex&lt; T &gt; **responses):&#160;waveform_util.cpp'],['../waveform__util_8cpp.html#a7855961a7e993506d0eb6992de2946b6',1,'create_coherent_GW_detection(std::string *detectors, int detector_N, T **frequencies, int *lengths, bool reuse_WF, gen_params_base&lt; T &gt; *gen_params, std::string generation_method, std::complex&lt; T &gt; **responses):&#160;waveform_util.cpp']]],
  ['create_5fcoherent_5fgw_5fdetection_3c_20adouble_20_3e_109',['create_coherent_GW_detection&lt; adouble &gt;',['../waveform__util_8cpp.html#a8363f63494f1d4239db92e674df72a68',1,'waveform_util.cpp']]],
  ['create_5fcoherent_5fgw_5fdetection_3c_20double_20_3e_110',['create_coherent_GW_detection&lt; double &gt;',['../waveform__util_8cpp.html#a3f1ab21851c713d56a852ce360d37be8',1,'waveform_util.cpp']]],
  ['create_5fcoherent_5fgw_5fdetection_5freuse_5fwf_111',['create_coherent_GW_detection_reuse_WF',['../waveform__util_8h.html#ada9ed4b480f8e52f60e7b03346f8d48e',1,'create_coherent_GW_detection_reuse_WF(std::string *detectors, int detector_N, T *frequencies, int lengths, gen_params_base&lt; T &gt; *gen_params, std::string generation_method, std::complex&lt; T &gt; **responses):&#160;waveform_util.cpp'],['../waveform__util_8cpp.html#a4919007bc57727e4c4946ac4b13a9e37',1,'create_coherent_GW_detection_reuse_WF(std::string *detectors, int detector_N, T *frequencies, int length, gen_params_base&lt; T &gt; *gen_params, std::string generation_method, std::complex&lt; T &gt; **responses):&#160;waveform_util.cpp']]],
  ['create_5fcoherent_5fgw_5fdetection_5freuse_5fwf_3c_20adouble_20_3e_112',['create_coherent_GW_detection_reuse_WF&lt; adouble &gt;',['../waveform__util_8cpp.html#a81a3e55c606a0be8813b3eca49cceaae',1,'waveform_util.cpp']]],
  ['create_5fcoherent_5fgw_5fdetection_5freuse_5fwf_3c_20double_20_3e_113',['create_coherent_GW_detection_reuse_WF&lt; double &gt;',['../waveform__util_8cpp.html#a3da9e0e28e414aebcef5390912979234',1,'waveform_util.cpp']]],
  ['create_5fdata_5fdump_114',['create_data_dump',['../classmcmc__sampler__output.html#aad6a74ee7e3e08ecb6fc415507adf782',1,'mcmc_sampler_output']]],
  ['createsphvector_115',['CreateSphVector',['../IMRPhenomPv3utils_8h.html#ac30b5af252e1dddf3bc6d598a69ea8ac',1,'CreateSphVector(const T r, const T th, const T ph):&#160;IMRPhenomPv3utils.cpp'],['../IMRPhenomPv3utils_8cpp.html#ac30b5af252e1dddf3bc6d598a69ea8ac',1,'CreateSphVector(const T r, const T th, const T ph):&#160;IMRPhenomPv3utils.cpp']]],
  ['createsphvector_3c_20adouble_20_3e_116',['CreateSphVector&lt; adouble &gt;',['../IMRPhenomPv3utils_8cpp.html#a20d5974848732c27c4c3b10aab4e4696',1,'IMRPhenomPv3utils.cpp']]],
  ['createsphvector_3c_20double_20_3e_117',['CreateSphVector&lt; double &gt;',['../IMRPhenomPv3utils_8cpp.html#aa054fdc91e6d0361891ee8855e277708',1,'IMRPhenomPv3utils.cpp']]],
  ['crossproduct_118',['CrossProduct',['../IMRPhenomPv3utils_8h.html#a904aad40edca890c2930dea3bc926cb6',1,'CrossProduct(const vector3D&lt; T &gt; vec1, const vector3D&lt; T &gt; vec2):&#160;IMRPhenomPv3utils.cpp'],['../IMRPhenomPv3utils_8cpp.html#a904aad40edca890c2930dea3bc926cb6',1,'CrossProduct(const vector3D&lt; T &gt; vec1, const vector3D&lt; T &gt; vec2):&#160;IMRPhenomPv3utils.cpp']]],
  ['crossproduct_3c_20adouble_20_3e_119',['CrossProduct&lt; adouble &gt;',['../IMRPhenomPv3utils_8cpp.html#a3929d34ac5dc292541f550cf837a21fb',1,'IMRPhenomPv3utils.cpp']]],
  ['crossproduct_3c_20double_20_3e_120',['CrossProduct&lt; double &gt;',['../IMRPhenomPv3utils_8cpp.html#a9ffe6b41ca95800964876c70a2644800',1,'IMRPhenomPv3utils.cpp']]]
];
