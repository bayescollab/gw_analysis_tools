var searchData=
[
  ['p_5fn_5fdetector_0',['p_N_detector',['../detector__util_8cpp.html#aad9c958bcdfcfc478c0f3bcc2f8017d5',1,'p_N_detector(double omega, int samples, int N_detectors, std::string *detectors, int rand_seed):&#160;detector_util.cpp'],['../detector__util_8h.html#aad9c958bcdfcfc478c0f3bcc2f8017d5',1,'p_N_detector(double omega, int samples, int N_detectors, std::string *detectors, int rand_seed):&#160;detector_util.cpp']]],
  ['p_5fsingle_5fdetector_1',['p_single_detector',['../detector__util_8cpp.html#a742264b5eeff1d244e299d47cb7fa084',1,'p_single_detector(double omega, int samples):&#160;detector_util.cpp'],['../detector__util_8h.html#a742264b5eeff1d244e299d47cb7fa084',1,'p_single_detector(double omega, int samples):&#160;detector_util.cpp']]],
  ['p_5fsingle_5fdetector_5ffit_2',['p_single_detector_fit',['../detector__util_8cpp.html#a0af90e8d6505794a792d2b35bf583bef',1,'p_single_detector_fit(double omega):&#160;detector_util.cpp'],['../detector__util_8h.html#a0af90e8d6505794a792d2b35bf583bef',1,'p_single_detector_fit(double omega):&#160;detector_util.cpp']]],
  ['p_5fsingle_5fdetector_5finterp_3',['p_single_detector_interp',['../detector__util_8cpp.html#a38cf74dd41080e18fc64000605019c50',1,'p_single_detector_interp(double omega):&#160;detector_util.cpp'],['../detector__util_8h.html#a38cf74dd41080e18fc64000605019c50',1,'p_single_detector_interp(double omega):&#160;detector_util.cpp']]],
  ['p_5ftriple_5fdetector_5ffit_4',['p_triple_detector_fit',['../detector__util_8cpp.html#a8470b24a84da4e746ee95ff9bb87bbbc',1,'p_triple_detector_fit(double omega):&#160;detector_util.cpp'],['../detector__util_8h.html#a8470b24a84da4e746ee95ff9bb87bbbc',1,'p_triple_detector_fit(double omega):&#160;detector_util.cpp']]],
  ['p_5ftriple_5fdetector_5finterp_5',['p_triple_detector_interp',['../detector__util_8cpp.html#a2806107bf836833162b1f7e2b78b14d5',1,'p_triple_detector_interp(double omega):&#160;detector_util.cpp'],['../detector__util_8h.html#a2806107bf836833162b1f7e2b78b14d5',1,'p_triple_detector_interp(double omega):&#160;detector_util.cpp']]],
  ['pack_5flocal_5fmod_5fstructure_6',['pack_local_mod_structure',['../mcmc__gw_8cpp.html#af13370b402086ce1b8367743279c93e0',1,'pack_local_mod_structure(mcmc_data_interface *interface, double *param, int *status, std::string waveform_extended, void *parameters, MCMC_modification_struct *full_struct, MCMC_modification_struct *local_struct):&#160;mcmc_gw.cpp'],['../mcmc__gw_8h.html#af13370b402086ce1b8367743279c93e0',1,'pack_local_mod_structure(mcmc_data_interface *interface, double *param, int *status, std::string waveform_extended, void *parameters, MCMC_modification_struct *full_struct, MCMC_modification_struct *local_struct):&#160;mcmc_gw.cpp']]],
  ['pack_5flocal_5fmod_5fstructure_5fpy_7',['pack_local_mod_structure_py',['../gwatpy__wrapping_8cpp.html#a0b8e8698db5ab9ca537e60a7e854f7fd',1,'pack_local_mod_structure_py(mcmc_data_interface *interface, double *param, int *status, char *waveform_extended, MCMC_modification_struct *full_struct, MCMC_modification_struct *local_struct):&#160;gwatpy_wrapping.cpp'],['../gwatpy__wrapping_8h.html#a0b8e8698db5ab9ca537e60a7e854f7fd',1,'pack_local_mod_structure_py(mcmc_data_interface *interface, double *param, int *status, char *waveform_extended, MCMC_modification_struct *full_struct, MCMC_modification_struct *local_struct):&#160;gwatpy_wrapping.cpp']]],
  ['pack_5flocal_5fmod_5fstructure_5fv2_8',['pack_local_mod_structure_v2',['../mcmc__gw__extended_8cpp.html#a0dd88d4609aeb55ef44db27915146b2a',1,'mcmc_gw_extended.cpp']]],
  ['pade_9',['Pade',['../classIMRPhenomD__NRT.html#a7a0a71083576eec8667744829c179b3f',1,'IMRPhenomD_NRT']]],
  ['pair_5fpop_10',['pair_pop',['../classThreadPool.html#a68826d3070757ae2089f1d4d5cdde966',1,'ThreadPool']]],
  ['parallel_5fsample_11',['parallel_sample',['../mc__reject_8cpp.html#a8e7fcdc575532164d9f76f27102b4c9a',1,'parallel_sample(int threadid, mcr_job job):&#160;mc_reject.cpp'],['../mc__reject_8h.html#a8e7fcdc575532164d9f76f27102b4c9a',1,'parallel_sample(int threadid, mcr_job job):&#160;mc_reject.cpp']]],
  ['pdet_5ftriple_5fdetector_5ffit_12',['pdet_triple_detector_fit',['../detector__util_8cpp.html#a844b28c8dcc0fcbb014b38c1ba013811',1,'pdet_triple_detector_fit(double rho_thresh, double rho_opt):&#160;detector_util.cpp'],['../detector__util_8h.html#a844b28c8dcc0fcbb014b38c1ba013811',1,'pdet_triple_detector_fit(double rho_thresh, double rho_opt):&#160;detector_util.cpp']]],
  ['phase_5fins_13',['phase_ins',['../classppE__IMRPhenomPv2__Inspiral.html#a829118c33d81ed4bcc4b48e7349c58f6',1,'ppE_IMRPhenomPv2_Inspiral::phase_ins()'],['../classppE__IMRPhenomD__NRT__Inspiral.html#a38c7ff85cfba10a20c8561c519937a0a',1,'ppE_IMRPhenomD_NRT_Inspiral::phase_ins()'],['../classppE__IMRPhenomD__Inspiral.html#a3187c9dba10e42f0bf20fb1e3bac9a52',1,'ppE_IMRPhenomD_Inspiral::phase_ins()'],['../classIMRPhenomPv2__NRT.html#ac49ec33ba8d2a4e45bee6e16ca02af38',1,'IMRPhenomPv2_NRT::phase_ins()'],['../classgIMRPhenomPv2.html#a38af0a8b925f448bf7f865cb6c2d4483',1,'gIMRPhenomPv2::phase_ins()'],['../classgIMRPhenomD.html#a7f4ebb4ae13d1038a437f86862f6dce1',1,'gIMRPhenomD::phase_ins()']]],
  ['phase_5fins_5fnrt_14',['phase_ins_NRT',['../classIMRPhenomD__NRT.html#a6bd23859be4f934e5fd6b8ef6b3b92ff',1,'IMRPhenomD_NRT']]],
  ['phase_5fint_15',['phase_int',['../classppE__IMRPhenomPv2__IMR.html#a713b095dacec9472b5361c1caf884347',1,'ppE_IMRPhenomPv2_IMR::phase_int()'],['../classppE__IMRPhenomD__NRT__IMR.html#a1dceb35bc8f7b9e762c7965c793448bb',1,'ppE_IMRPhenomD_NRT_IMR::phase_int()'],['../classppE__IMRPhenomD__IMR.html#a04dc31c54da6e199db28197665b469a1',1,'ppE_IMRPhenomD_IMR::phase_int()']]],
  ['phase_5fmr_16',['phase_mr',['../classppE__IMRPhenomPv2__IMR.html#a498e1d8b7ea85028b295feb9487ca066',1,'ppE_IMRPhenomPv2_IMR::phase_mr()'],['../classppE__IMRPhenomD__NRT__IMR.html#aee02b90af458755882f48d3db9694ae6',1,'ppE_IMRPhenomD_NRT_IMR::phase_mr()'],['../classppE__IMRPhenomD__IMR.html#a3b64e9bbf566450687bcfaa85c0e493f',1,'ppE_IMRPhenomD_IMR::phase_mr()']]],
  ['phase_5fspin_5fnrt_17',['phase_spin_NRT',['../classIMRPhenomD__NRT.html#a81b3310101eaabfd7641c4ebeee8c591',1,'IMRPhenomD_NRT']]],
  ['phenomp_5ffisher_18',['PhenomP_fisher',['../fisher_8h.html#ac16fd5c6296dd496e81c51ab67fcc983',1,'fisher.h']]],
  ['phenompv2_5finplane_5fspin_19',['PhenomPv2_inplane_spin',['../classIMRPhenomPv2.html#a3ac01e83cf58d5fe70056afd66e9d7fe',1,'IMRPhenomPv2']]],
  ['phenompv2_5fjsf_5ffrom_5fparams_20',['PhenomPv2_JSF_from_params',['../classIMRPhenomPv2.html#a9c81435792ee35948b3e7b3438c1ef1e',1,'IMRPhenomPv2']]],
  ['phenompv2_5fparam_5ftransform_21',['PhenomPv2_Param_Transform',['../classIMRPhenomPv2.html#ae8f253a1feebc43995dd5d052c856e05',1,'IMRPhenomPv2']]],
  ['phenompv2_5fparam_5ftransform_5fj_22',['PhenomPv2_Param_Transform_J',['../classIMRPhenomPv2.html#a684f1bbc22773a72e8000de61c1b6def',1,'IMRPhenomPv2']]],
  ['phenompv2_5fparam_5ftransform_5freduced_23',['PhenomPv2_Param_Transform_reduced',['../classIMRPhenomPv2.html#a09917aef3521bd8e3b8d8516930077a0',1,'IMRPhenomPv2']]],
  ['phi_24',['PHI',['../classTaylorT2.html#a86043dddc96c05ad7e5c243b5920a3f8',1,'TaylorT2']]],
  ['pnseries_5fbeta_25',['PNSeries_beta',['../ppE__utilities_8h.html#a7f550078445f8196254ab50925c99473',1,'ppE_utilities.h']]],
  ['populate_5fchain_5ftemperatures_26',['populate_chain_temperatures',['../classmcmc__sampler__output.html#ad4341553ced6c483f35bbaaf7af38471',1,'mcmc_sampler_output']]],
  ['populate_5finitial_5foutput_27',['populate_initial_output',['../classmcmc__sampler__output.html#aad3fd5092183b7b36735ccc6ca822284',1,'mcmc_sampler_output']]],
  ['populate_5fnoise_28',['populate_noise',['../detector__util_8cpp.html#a96e8f667b0106557c0c285dc658b8ac3',1,'populate_noise(double *frequencies, std::string detector, double *noise_root, int length, double integration_time):&#160;detector_util.cpp'],['../detector__util_8h.html#a190c1fc72354b7777f3d67261fcee374',1,'populate_noise(double *frequencies, std::string detector, double *noise_root, int length, double integration_time=48):&#160;detector_util.cpp']]],
  ['populate_5fnoise_5fpy_29',['populate_noise_py',['../gwatpy__wrapping_8h.html#a252c604dc1f52c2fb54cf3bb327afa74',1,'populate_noise_py(double *frequencies, char *detector, double *noise_root, int length, double integration_time):&#160;gwatpy_wrapping.cpp'],['../gwatpy__wrapping_8cpp.html#a252c604dc1f52c2fb54cf3bb327afa74',1,'populate_noise_py(double *frequencies, char *detector, double *noise_root, int length, double integration_time):&#160;gwatpy_wrapping.cpp']]],
  ['populate_5fsource_5fparameters_30',['populate_source_parameters',['../structsource__parameters.html#aa2ccc130dc3729613080a59215655aec',1,'source_parameters']]],
  ['populate_5fsource_5fparameters_5fold_31',['populate_source_parameters_old',['../structsource__parameters.html#a1b9db2c7d8abf202ca908fd4e58b0949',1,'source_parameters']]],
  ['postmerger_5fparams_32',['postmerger_params',['../waveform__util_8cpp.html#a8ee807356a4303fb65463fde5286ea28',1,'postmerger_params(gen_params_base&lt; T &gt; *params, std::string generation_method, T *fpeak, T *fdamp, T *fRD):&#160;waveform_util.cpp'],['../waveform__util_8h.html#a8ee807356a4303fb65463fde5286ea28',1,'postmerger_params(gen_params_base&lt; T &gt; *params, std::string generation_method, T *fpeak, T *fdamp, T *fRD):&#160;waveform_util.cpp']]],
  ['postmerger_5fparams_3c_20adouble_20_3e_33',['postmerger_params&lt; adouble &gt;',['../waveform__util_8cpp.html#a30cab76614a6152996df1e71871337db',1,'waveform_util.cpp']]],
  ['postmerger_5fparams_3c_20double_20_3e_34',['postmerger_params&lt; double &gt;',['../waveform__util_8cpp.html#acfbfa7a6f00e70cb658c34fabc1a3b6b',1,'waveform_util.cpp']]],
  ['pow_5fint_35',['pow_int',['../util_8h.html#a362581f25c83753aefac698e977cb73e',1,'pow_int(double base, int power):&#160;util.cpp'],['../util_8h.html#a2777502ea85828774e2a331576db996d',1,'pow_int(adouble base, int power):&#160;util.cpp'],['../util_8cpp.html#a362581f25c83753aefac698e977cb73e',1,'pow_int(double base, int power):&#160;util.cpp'],['../util_8cpp.html#a2777502ea85828774e2a331576db996d',1,'pow_int(adouble base, int power):&#160;util.cpp']]],
  ['powerlaw_5ffrom_5funiform_36',['powerlaw_from_uniform',['../util_8h.html#a18c22e7aa3a49af21903a0e6779939de',1,'powerlaw_from_uniform(double x0, double x1, double power, double uniform_random_number):&#160;util.cpp'],['../util_8cpp.html#a18c22e7aa3a49af21903a0e6779939de',1,'powerlaw_from_uniform(double x0, double x1, double power, double uniform_random_number):&#160;util.cpp']]],
  ['ppe_5fgimr_5fmapping_37',['ppE_gIMR_mapping',['../classgIMRPhenomD.html#a740109e9ea8670dd46e2bee0fa633538',1,'gIMRPhenomD']]],
  ['ppe_5ftheory_5fcovariance_5ftransformation_38',['ppE_theory_covariance_transformation',['../fisher_8h.html#ac47e3de572425bad945ddd38d0dfa9d7',1,'ppE_theory_covariance_transformation(std::string original_method, std::string new_method, int dimension, gen_params_base&lt; double &gt; *param, double **old_cov, double **new_cov):&#160;fisher.cpp'],['../fisher_8cpp.html#ac47e3de572425bad945ddd38d0dfa9d7',1,'ppE_theory_covariance_transformation(std::string original_method, std::string new_method, int dimension, gen_params_base&lt; double &gt; *param, double **old_cov, double **new_cov):&#160;fisher.cpp']]],
  ['ppe_5ftheory_5ffisher_5ftransformation_39',['ppE_theory_fisher_transformation',['../fisher_8cpp.html#a8b73a325268c3d52e99f93aba2aba60e',1,'ppE_theory_fisher_transformation(std::string original_method, std::string new_method, int dimension, gen_params_base&lt; double &gt; *param, double **old_fisher, double **new_fisher):&#160;fisher.cpp'],['../fisher_8h.html#a8b73a325268c3d52e99f93aba2aba60e',1,'ppE_theory_fisher_transformation(std::string original_method, std::string new_method, int dimension, gen_params_base&lt; double &gt; *param, double **old_fisher, double **new_fisher):&#160;fisher.cpp']]],
  ['ppe_5ftheory_5ffisher_5ftransformation_5fcalculate_5fderivatives_40',['ppE_theory_fisher_transformation_calculate_derivatives',['../fisher_8h.html#a6ad1ade356b3dcec5f3f94df5dbdc991',1,'fisher.h']]],
  ['ppe_5ftheory_5ffisher_5ftransformation_5fpy_41',['ppE_theory_fisher_transformation_py',['../gwatpy__wrapping_8h.html#a253cfa9edb2504313aca887ee454856c',1,'ppE_theory_fisher_transformation_py(double m1, double m2, double *spin1, double *spin2, double chip, double phip, double Luminosity_Distance, double phiRef, double tc, double RA, double DEC, double phi_l, double theta_l, double psi, double incl_angle, double gmst, bool reduced_spin, bool sky_average, bool NSflag1, bool NSflag2, bool horizon_coord, bool equatorial_orientation, int Nmod, double *betappe, double **original_fisher, double **new_fisher, char *original_method, char *new_method, int dimension):&#160;gwatpy_wrapping.cpp'],['../gwatpy__wrapping_8cpp.html#a253cfa9edb2504313aca887ee454856c',1,'ppE_theory_fisher_transformation_py(double m1, double m2, double *spin1, double *spin2, double chip, double phip, double Luminosity_Distance, double phiRef, double tc, double RA, double DEC, double phi_l, double theta_l, double psi, double incl_angle, double gmst, bool reduced_spin, bool sky_average, bool NSflag1, bool NSflag2, bool horizon_coord, bool equatorial_orientation, int Nmod, double *betappe, double **original_fisher, double **new_fisher, char *original_method, char *new_method, int dimension):&#160;gwatpy_wrapping.cpp']]],
  ['ppe_5ftheory_5ftransformation_5fcalculate_5fderivatives_42',['ppE_theory_transformation_calculate_derivatives',['../fisher_8cpp.html#ad903809a1b57ad4dfee52ce8384b6ebd',1,'fisher.cpp']]],
  ['ppe_5ftheory_5ftransformation_5fjac_43',['ppE_theory_transformation_jac',['../fisher_8h.html#ac17390e3cb481a816a3e619a4f3f680a',1,'ppE_theory_transformation_jac(std::string original_method, std::string new_method, int dimension, gen_params_base&lt; double &gt; *param, double **jac):&#160;fisher.cpp'],['../fisher_8cpp.html#ac17390e3cb481a816a3e619a4f3f680a',1,'ppE_theory_transformation_jac(std::string original_method, std::string new_method, int dimension, gen_params_base&lt; double &gt; *param, double **jac):&#160;fisher.cpp']]],
  ['ppealt_5fbeta_44',['ppEAlt_beta',['../ppE__utilities_8h.html#a975c20355f9f2b87eb5365098a0561f3',1,'ppE_utilities.h']]],
  ['ppefisherrjvariables_45',['ppEFisherRJVariables',['../classppEFisherRJVariables.html#a6381d09f76553ec1bdd119798bc02cf6',1,'ppEFisherRJVariables']]],
  ['pre_5fcalculate_5fea_5ffactors_46',['pre_calculate_EA_factors',['../classEA__IMRPhenomD__NRT.html#a79cc74d96e2cf879e24e4d8b2b7324c0',1,'EA_IMRPhenomD_NRT']]],
  ['prep_5ffisher_5fcalculation_47',['prep_fisher_calculation',['../fisher_8h.html#a889b2789fdd2c018b72544a3ad05c921',1,'fisher.h']]],
  ['prep_5fgsl_5fsubroutine_48',['prep_gsl_subroutine',['../fisher_8h.html#a06005d743a31e704ea51c2e1b2f7d69b',1,'prep_gsl_subroutine(gsl_subroutine *params_packed):&#160;fisher.cpp'],['../fisher_8cpp.html#a06005d743a31e704ea51c2e1b2f7d69b',1,'prep_gsl_subroutine(gsl_subroutine *params_packed):&#160;fisher.cpp']]],
  ['prep_5fsource_5fparameters_49',['prep_source_parameters',['../waveform__generator_8cpp.html#a1144ffa962a6bc4bfacb2b01029077d3',1,'prep_source_parameters(source_parameters&lt; double &gt; *, gen_params_base&lt; double &gt; *, std::string):&#160;waveform_generator.cpp'],['../waveform__generator_8cpp.html#af7756bb5b42d34469cb0f3a66948ac19',1,'prep_source_parameters(source_parameters&lt; adouble &gt; *, gen_params_base&lt; adouble &gt; *, std::string):&#160;waveform_generator.cpp'],['../waveform__generator_8h.html#aafe9f9f2b36c822e490164e2057f324e',1,'prep_source_parameters(source_parameters&lt; T &gt; *out, gen_params_base&lt; T &gt; *in, std::string generation_method):&#160;waveform_generator.cpp'],['../waveform__generator_8cpp.html#aafe9f9f2b36c822e490164e2057f324e',1,'prep_source_parameters(source_parameters&lt; T &gt; *out, gen_params_base&lt; T &gt; *in, std::string generation_method):&#160;waveform_generator.cpp']]],
  ['print_5fproperties_50',['print_properties',['../classgen__params__base.html#aa756dbb5f369104ede70c636aecc9a22',1,'gen_params_base']]],
  ['printprogress_51',['printProgress',['../util_8cpp.html#a9d3b483a858efb84ce776bed255b6dd6',1,'printProgress(double percentage):&#160;util.cpp'],['../util_8h.html#a9d3b483a858efb84ce776bed255b6dd6',1,'printProgress(double percentage):&#160;util.cpp']]],
  ['pt_5fdynamical_5ftimescale_52',['PT_dynamical_timescale',['../mcmc__sampler__internals_8h.html#a1f07e7540a20f438aad42f569c2e22d2',1,'PT_dynamical_timescale(int t0, int nu, int t):&#160;mcmc_sampler_internals.cpp'],['../mcmc__sampler__internals_8cpp.html#a1f07e7540a20f438aad42f569c2e22d2',1,'PT_dynamical_timescale(int t0, int nu, int t):&#160;mcmc_sampler_internals.cpp']]],
  ['ptmcmc_5fmethod_5fspecific_5fprep_53',['PTMCMC_method_specific_prep',['../mcmc__gw_8h.html#ae05b6d20ce302112ce0dc42c35002e5d',1,'PTMCMC_method_specific_prep(std::string generation_method, int dimension, double **seeding_var_ptr, bool local_seeding):&#160;mcmc_gw.cpp'],['../mcmc__gw_8cpp.html#aa4da9c253a52a34fbe6de4fab41d3f10',1,'PTMCMC_method_specific_prep(std::string generation_method, int dimension, double **seeding_var, bool local_seeding):&#160;mcmc_gw.cpp']]],
  ['ptmcmc_5fmethod_5fspecific_5fprep_5fv2_54',['PTMCMC_method_specific_prep_v2',['../mcmc__gw__extended_8h.html#aa2d0967783115a9affc49025ab6121dd',1,'PTMCMC_method_specific_prep_v2(std::string generation_method, int dimension, bool *intrinsic, MCMC_modification_struct *mod_struct):&#160;mcmc_gw_extended.cpp'],['../mcmc__gw__extended_8cpp.html#aa2d0967783115a9affc49025ab6121dd',1,'PTMCMC_method_specific_prep_v2(std::string generation_method, int dimension, bool *intrinsic, MCMC_modification_struct *mod_struct):&#160;mcmc_gw_extended.cpp']]],
  ['ptmcmc_5fmh_55',['PTMCMC_MH',['../mcmc__sampler_8h.html#abadd32f3c10e69def18edd0b567da43b',1,'PTMCMC_MH(double ***output, int dimension, int N_steps, int chain_N, double *initial_pos, double *seeding_var, double **ensemble_initial_position, double *chain_temps, int swp_freq, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), double(*log_likelihood)(double *param, mcmc_data_interface *interface, void *parameters), void(*fisher)(double *param, double **fisher, mcmc_data_interface *interface, void *parameters), void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string checkpoint_filename):&#160;mcmc_sampler.cpp'],['../mcmc__sampler_8cpp.html#a88ef32c99e2ec7e0a7c214b762f1ac6f',1,'PTMCMC_MH(double ***output, int dimension, int N_steps, int chain_N, double *initial_pos, double *seeding_var, double **ensemble_initial_pos, double *chain_temps, int swp_freq, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), double(*log_likelihood)(double *param, mcmc_data_interface *interface, void *parameters), void(*fisher)(double *param, double **fisher, mcmc_data_interface *interface, void *parameters), void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string checkpoint_file):&#160;mcmc_sampler.cpp']]],
  ['ptmcmc_5fmh_5fdynamic_5fpt_5falloc_56',['PTMCMC_MH_dynamic_PT_alloc',['../mcmc__sampler_8h.html#a0c85884d4dbcd69be3c57db40518c3a4',1,'PTMCMC_MH_dynamic_PT_alloc(double ***output, int dimension, int N_steps, int chain_N, int max_chain_N_thermo_ensemble, double *initial_pos, double *seeding_var, double **ensemble_initial_position, double *chain_temps, int swp_freq, int t0, int nu, std::string chain_distribution_scheme, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), double(*log_likelihood)(double *param, mcmc_data_interface *interface, void *parameters), void(*fisher)(double *param, double **fisher, mcmc_data_interface *interface, void *parameters), void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string checkpoint_file):&#160;mcmc_sampler.cpp'],['../mcmc__sampler_8cpp.html#abc455062a5c2d5e6f7eaead859faf515',1,'PTMCMC_MH_dynamic_PT_alloc(double ***output, int dimension, int N_steps, int chain_N, int max_chain_N_thermo_ensemble, double *initial_pos, double *seeding_var, double **ensemble_initial_pos, double *chain_temps, int swp_freq, int t0, int nu, std::string chain_distribution_scheme, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), double(*log_likelihood)(double *param, mcmc_data_interface *interface, void *parameters), void(*fisher)(double *param, double **fisher, mcmc_data_interface *interface, void *parameters), void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string checkpoint_file):&#160;mcmc_sampler.cpp']]],
  ['ptmcmc_5fmh_5fdynamic_5fpt_5falloc_5fgw_57',['PTMCMC_MH_dynamic_PT_alloc_GW',['../mcmc__gw_8h.html#ae2ea76adaa9e6d6142114a9bb63b497b',1,'PTMCMC_MH_dynamic_PT_alloc_GW(double ***output, int dimension, int N_steps, int chain_N, int max_chain_N_thermo_ensemble, double *initial_pos, double *seeding_var, double **ensemble_initial_pos, double *chain_temps, int swp_freq, int t0, int nu, std::string chain_distribution_scheme, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), int numThreads, bool pool, bool show_prog, int num_detectors, std::complex&lt; double &gt; **data, double **noise_psd, double **frequencies, int *data_length, double gps_time, std::string *detectors, MCMC_modification_struct *mod_struct, std::string generation_method, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_filename):&#160;mcmc_gw.cpp'],['../mcmc__gw_8cpp.html#ae2ea76adaa9e6d6142114a9bb63b497b',1,'PTMCMC_MH_dynamic_PT_alloc_GW(double ***output, int dimension, int N_steps, int chain_N, int max_chain_N_thermo_ensemble, double *initial_pos, double *seeding_var, double **ensemble_initial_pos, double *chain_temps, int swp_freq, int t0, int nu, std::string chain_distribution_scheme, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), int numThreads, bool pool, bool show_prog, int num_detectors, std::complex&lt; double &gt; **data, double **noise_psd, double **frequencies, int *data_length, double gps_time, std::string *detectors, MCMC_modification_struct *mod_struct, std::string generation_method, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_filename):&#160;mcmc_gw.cpp']]],
  ['ptmcmc_5fmh_5fdynamic_5fpt_5falloc_5finternal_58',['PTMCMC_MH_dynamic_PT_alloc_internal',['../mcmc__sampler_8h.html#a1f2269f6a41aba9eb0404c85999debbf',1,'PTMCMC_MH_dynamic_PT_alloc_internal(double ***output, int dimension, int N_steps, int chain_N, int max_chain_N_thermo_ensemble, double *initial_pos, double *seeding_var, double **ensemble_initial_position, double *chain_temps, int swp_freq, int t0, int nu, std::string chain_distribution_scheme, std::function&lt; double(double *, int *, int, mcmc_data_interface *interface, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *interface, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *interface, void *)&gt;fisher, void **user_parameters, int numThreads, bool pool, bool show_prog, bool dynamic_chain_number, std::string statistics_filename, std::string chain_filename, std::string checkpoint_file, bool burn_phase):&#160;mcmc_sampler.h'],['../mcmc__sampler_8cpp.html#a47597967b719fb93386625cd16ef5bc8',1,'PTMCMC_MH_dynamic_PT_alloc_internal(double ***output, int dimension, int N_steps, int chain_N, int max_chain_N_thermo_ensemble, double *initial_pos, double *seeding_var, double **ensemble_initial_pos, double *chain_temps, int swp_freq, int t0, int nu, std::string chain_distribution_scheme, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, void **user_parameters, int numThreads, bool pool, bool show_prog, bool dynamic_chain_number, std::string statistics_filename, std::string chain_filename, std::string checkpoint_file, bool burn_phase):&#160;mcmc_sampler.cpp']]],
  ['ptmcmc_5fmh_5fdynamic_5fpt_5falloc_5funcorrelated_59',['PTMCMC_MH_dynamic_PT_alloc_uncorrelated',['../mcmc__sampler_8h.html#a58547b1e9b7f5fabcc815660b84d5722',1,'PTMCMC_MH_dynamic_PT_alloc_uncorrelated(mcmc_sampler_output *sampler_output, double **output, int dimension, int N_steps, int chain_N, int max_chain_N_thermo_ensemble, double *initial_pos, double *seeding_var, double **ensemble_initial_position, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), double(*log_likelihood)(double *param, mcmc_data_interface *interface, void *parameters), void(*fisher)(double *param, double **fisher, mcmc_data_interface *interface, void *parameters), void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_file):&#160;mcmc_sampler.cpp'],['../mcmc__sampler_8cpp.html#a0c1b2330fe77bbf8d279accac2d0cae4',1,'PTMCMC_MH_dynamic_PT_alloc_uncorrelated(mcmc_sampler_output *sampler_output, double **output, int dimension, int N_steps, int chain_N, int max_chain_N_thermo_ensemble, double *initial_pos, double *seeding_var, double **ensemble_initial_pos, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), double(*log_likelihood)(double *param, mcmc_data_interface *interface, void *parameters), void(*fisher)(double *param, double **fisher, mcmc_data_interface *interface, void *parameters), void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_file):&#160;mcmc_sampler.cpp']]],
  ['ptmcmc_5fmh_5fdynamic_5fpt_5falloc_5funcorrelated_5fgw_60',['PTMCMC_MH_dynamic_PT_alloc_uncorrelated_GW',['../mcmc__gw_8h.html#a5a0b6663a2e19df9417b744a6d8d12d7',1,'PTMCMC_MH_dynamic_PT_alloc_uncorrelated_GW(mcmc_sampler_output *sampler_output, double **output, int dimension, int N_steps, int chain_N, int max_chain_N_thermo_ensemble, double *initial_pos, double *seeding_var, double **ensemble_initial_pos, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), int numThreads, bool pool, bool show_prog, int num_detectors, std::complex&lt; double &gt; **data, double **noise_psd, double **frequencies, int *data_length, double gps_time, std::string *detectors, MCMC_modification_struct *mod_struct, std::string generation_method, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_filename):&#160;mcmc_gw.cpp'],['../mcmc__gw_8cpp.html#a5a0b6663a2e19df9417b744a6d8d12d7',1,'PTMCMC_MH_dynamic_PT_alloc_uncorrelated_GW(mcmc_sampler_output *sampler_output, double **output, int dimension, int N_steps, int chain_N, int max_chain_N_thermo_ensemble, double *initial_pos, double *seeding_var, double **ensemble_initial_pos, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), int numThreads, bool pool, bool show_prog, int num_detectors, std::complex&lt; double &gt; **data, double **noise_psd, double **frequencies, int *data_length, double gps_time, std::string *detectors, MCMC_modification_struct *mod_struct, std::string generation_method, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_filename):&#160;mcmc_gw.cpp']]],
  ['ptmcmc_5fmh_5fdynamic_5fpt_5falloc_5funcorrelated_5fgw_5fv2_61',['PTMCMC_MH_dynamic_PT_alloc_uncorrelated_GW_v2',['../mcmc__gw__extended_8h.html#a7ded6b5a687c0e24585a2553307d6154',1,'PTMCMC_MH_dynamic_PT_alloc_uncorrelated_GW_v2(int dimension, int independentSamples, int ensembleSize, int ensembleN, bayesship::positionInfo *initialPosition, bayesship::positionInfo **initialEnsemble, double swapProb, int burnIterations, int burnPriorIterations, int priorIterations, bool writePriorData, int batchSize, double **priorRanges, bayesship::probabilityFn *lp, int numThreads, bool pool, int num_detectors, std::complex&lt; double &gt; **data, double **noise_psd, double **frequencies, int *data_length, double gps_time, std::string *detectors, MCMC_modification_struct *mod_struct, std::string generation_method, std::string outputDir, std::string outputFileMoniker, bool ignoreExistingCheckpoint, bool coldChainStorageOnly):&#160;mcmc_gw_extended.cpp'],['../mcmc__gw__extended_8cpp.html#af8ab6f31013134b84a5d3eb82472ad07',1,'PTMCMC_MH_dynamic_PT_alloc_uncorrelated_GW_v2(int dimension, int independentSamples, int ensembleSize, int ensembleN, bayesship::positionInfo *initialPosition, bayesship::positionInfo **initialEnsemble, double swapProb, int burnIterations, int burnPriorIterations, int priorIterations, bool writePriorData, int batchSize, double **priorRanges, bayesship::probabilityFn *log_prior, int numThreads, bool pool, int num_detectors, std::complex&lt; double &gt; **data, double **noise_psd, double **frequencies, int *data_length, double gps_time, std::string *detectors, MCMC_modification_struct *mod_struct, std::string generation_method, std::string outputDir, std::string outputFileMoniker, bool ignoreExistingCheckpoint, bool coldChainStorageOnly):&#160;mcmc_gw_extended.cpp']]],
  ['ptmcmc_5fmh_5fdynamic_5fpt_5falloc_5funcorrelated_5finternal_62',['PTMCMC_MH_dynamic_PT_alloc_uncorrelated_internal',['../mcmc__sampler_8h.html#ae5547f010f59d953a7e445a69e782356',1,'PTMCMC_MH_dynamic_PT_alloc_uncorrelated_internal(mcmc_sampler_output *sampler_output, double **output, int dimension, int N_steps, int chain_N, int max_chain_N_thermo_ensemble, double *initial_pos, double *seeding_var, double **ensemble_initial_position, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, std::function&lt; double(double *, int *, int, mcmc_data_interface *interface, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *interface, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *interface, void *)&gt;fisher, void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_file):&#160;mcmc_sampler.h'],['../mcmc__sampler_8cpp.html#a5e331e2cb0a37166f1edcaee2492dade',1,'PTMCMC_MH_dynamic_PT_alloc_uncorrelated_internal(mcmc_sampler_output *sampler_output, double **output, int dimension, int N_steps, int chain_N, int max_chain_N_thermo_ensemble, double *initial_pos, double *seeding_var, double **ensemble_initial_pos, double *chain_temps, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_file):&#160;mcmc_sampler.cpp']]],
  ['ptmcmc_5fmh_5fdynamic_5fpt_5falloc_5funcorrelated_5finternal_5fdriver_63',['PTMCMC_MH_dynamic_PT_alloc_uncorrelated_internal_driver',['../mcmc__sampler_8h.html#aee7761988eec5863920686025d14e4f9',1,'PTMCMC_MH_dynamic_PT_alloc_uncorrelated_internal_driver(mcmc_sampler_output *sampler_output, double **output, int dimension, int N_steps, int chain_N, int max_chain_N_thermo_ensemble, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_file, bool continue_burn):&#160;mcmc_sampler.cpp'],['../mcmc__sampler_8cpp.html#aee7761988eec5863920686025d14e4f9',1,'PTMCMC_MH_dynamic_PT_alloc_uncorrelated_internal_driver(mcmc_sampler_output *sampler_output, double **output, int dimension, int N_steps, int chain_N, int max_chain_N_thermo_ensemble, int swp_freq, int t0, int nu, int max_chunk_size, std::string chain_distribution_scheme, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string likelihood_log_filename, std::string checkpoint_file, bool continue_burn):&#160;mcmc_sampler.cpp']]],
  ['ptmcmc_5fmh_5fgw_64',['PTMCMC_MH_GW',['../mcmc__gw_8h.html#a8713dc500016043cd1a5c6a509b49de7',1,'PTMCMC_MH_GW(double ***output, int dimension, int N_steps, int chain_N, double *initial_pos, double *seeding_var, double **ensemble_initial_pos, double *chain_temps, int swp_freq, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), int numThreads, bool pool, bool show_prog, int num_detectors, std::complex&lt; double &gt; **data, double **noise_psd, double **frequencies, int *data_length, double gps_time, std::string *detector, MCMC_modification_struct *mod_struct, std::string generation_method, std::string statistics_filename, std::string chain_filename, std::string auto_corr_filename, std::string likelihood_log_filename, std::string checkpoint_filename):&#160;mcmc_gw.cpp'],['../mcmc__gw_8cpp.html#ae992d3cfd36b49874b4e89f38576b7ca',1,'PTMCMC_MH_GW(double ***output, int dimension, int N_steps, int chain_N, double *initial_pos, double *seeding_var, double **ensemble_initial_pos, double *chain_temps, int swp_freq, double(*log_prior)(double *param, mcmc_data_interface *interface, void *parameters), int numThreads, bool pool, bool show_prog, int num_detectors, std::complex&lt; double &gt; **data, double **noise_psd, double **frequencies, int *data_length, double gps_time, std::string *detectors, MCMC_modification_struct *mod_struct, std::string generation_method, std::string statistics_filename, std::string chain_filename, std::string auto_corr_filename, std::string likelihood_log_filename, std::string checkpoint_file):&#160;mcmc_gw.cpp']]],
  ['ptmcmc_5fmh_5finternal_65',['PTMCMC_MH_internal',['../mcmc__sampler_8h.html#a5aeb6a8579ebae23529bc14fd5e41e26',1,'PTMCMC_MH_internal(double ***output, int dimension, int N_steps, int chain_N, double *initial_pos, double *seeding_var, double **ensemble_initial_position, double *chain_temps, int swp_freq, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string checkpoint_filename, bool tune, bool burn_phase):&#160;mcmc_sampler.cpp'],['../mcmc__sampler_8cpp.html#ae6b9d7fba7f2aad43434b830b4641762',1,'PTMCMC_MH_internal(double ***output, int dimension, int N_steps, int chain_N, double *initial_pos, double *seeding_var, double **ensemble_initial_pos, double *chain_temps, int swp_freq, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_prior, std::function&lt; double(double *, int *, int, mcmc_data_interface *, void *)&gt; log_likelihood, std::function&lt; void(double *, int *, int, double **, mcmc_data_interface *, void *)&gt;fisher, void **user_parameters, int numThreads, bool pool, bool show_prog, std::string statistics_filename, std::string chain_filename, std::string checkpoint_file, bool tune, bool burn_phase):&#160;mcmc_sampler.cpp']]],
  ['ptmcmc_5fmh_5floop_66',['PTMCMC_MH_loop',['../mcmc__sampler_8cpp.html#a4d9c70d8f28cedec9e942ecdb83ed35c',1,'PTMCMC_MH_loop(sampler *samplerptr):&#160;mcmc_sampler.cpp'],['../mcmc__sampler_8h.html#a4d9c70d8f28cedec9e942ecdb83ed35c',1,'PTMCMC_MH_loop(sampler *samplerptr):&#160;mcmc_sampler.cpp']]],
  ['ptmcmc_5fmh_5fstep_5fincremental_67',['PTMCMC_MH_step_incremental',['../mcmc__sampler_8cpp.html#a6414c5a834d83dbe783326f3864d1fd4',1,'PTMCMC_MH_step_incremental(sampler *samplerptr, int increment):&#160;mcmc_sampler.cpp'],['../mcmc__sampler_8h.html#a6414c5a834d83dbe783326f3864d1fd4',1,'PTMCMC_MH_step_incremental(sampler *samplerptr, int increment):&#160;mcmc_sampler.cpp']]],
  ['public_5fstop_68',['public_stop',['../classThreadPool.html#ab85f3bf5998e7bd213326dab9895504d',1,'ThreadPool']]]
];
